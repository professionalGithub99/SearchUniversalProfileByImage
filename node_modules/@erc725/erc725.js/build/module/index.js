/*
    This file is part of @erc725/erc725.js.
    @erc725/erc725.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    @erc725/erc725.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with @erc725/erc725.js.  If not, see <http://www.gnu.org/licenses/>.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @file index.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
import { isAddress } from 'web3-utils';
import { Web3ProviderWrapper } from './providers/web3ProviderWrapper';
import { EthereumProviderWrapper } from './providers/ethereumProviderWrapper';
import { encodeArrayKey, getSchemaElement, decodeData, decodeKeyValue, decodeKey, isDataAuthentic, encodeData, } from './lib/utils';
import { SUPPORTED_HASH_FUNCTION_STRINGS } from './lib/constants';
export { flattenEncodedData, encodeData } from './lib/utils';
/**
 * :::warning
 * This package is currently in early stages of development, <br/>use only for testing or experimentation purposes.<br/>
 * :::
 *
 * @typeParam Schema **Work in progress, nothing to see here**.
 *
 */
export class ERC725 {
    /**
     * Creates an instance of ERC725.
     *
     * ```js reference title="Instantiation"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/instantiation.js#L1-L50
     * ```
     *
     * @param {ERC725JSONSchema[]} schema More information available here: [LSP-2-ERC725YJSONSchema](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md)
     * @param {string} address Address of the ERC725 contract you want to interact with
     * @param {any} provider
     * @param {ERC725Config} config Configuration object.
     *
     */
    constructor(schema, address, provider, config) {
        // NOTE: provider param can be either the provider, or and object with {provider:xxx ,type:xxx}
        // TODO: Add check for schema format?
        if (!schema) {
            throw new Error('Missing schema.');
        }
        const defaultConfig = {
            ipfsGateway: 'https://cloudflare-ipfs.com/ipfs/',
        };
        this.options = {
            schema,
            address,
            provider: this.initializeProvider(provider),
            config: Object.assign(Object.assign({}, defaultConfig), config),
        };
    }
    // eslint-disable-next-line class-methods-use-this
    initializeProvider(providerOrProviderWrapper) {
        // do not fail on no-provider
        if (!providerOrProviderWrapper)
            return undefined;
        if (typeof providerOrProviderWrapper.request === 'function')
            return new EthereumProviderWrapper(providerOrProviderWrapper);
        if (!providerOrProviderWrapper.request &&
            typeof providerOrProviderWrapper.send === 'function')
            return new Web3ProviderWrapper(providerOrProviderWrapper);
        if (providerOrProviderWrapper.type === "GRAPH_QL" /* GRAPH_QL */)
            return providerOrProviderWrapper;
        throw new Error(`Incorrect or unsupported provider ${providerOrProviderWrapper}`);
    }
    /**
     * Gets **decoded data** for one, many or all keys of the specified `ERC725` smart-contract.
     * When omitting the `keyOrKeys` parameter, it will get all the keys (as per {@link ERC725JSONSchema | ERC725JSONSchema} definition).
     *
     * :::caution
     * Data returned by this function does not contain external data of [`JSONURL`](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md#jsonurl)
     * or [`ASSETURL`](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md#asseturl) schema elements.
     *
     * If you would like to receive everything in one go, you can use {@link ERC725.fetchData | `fetchData`} for that.
     * :::
     *
     * @returns An object with schema element key names as properties, with corresponding **decoded** data as values.
     *
     * ```javascript reference title="getData - all keys from schema"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/getData.js#L7-L30
     * ```
     *
     * ```javascript reference title="getData - one key  "
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/getData.js#L32-L41
     * ```
     *
     * ```javascript reference title="getData - many keys"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/getData.js#L43-L56
     * ```
     */
    getData(keyOrKeys) {
        return __awaiter(this, void 0, void 0, function* () {
            this.getAddressAndProvider();
            if (!keyOrKeys) {
                // eslint-disable-next-line no-param-reassign
                keyOrKeys = this.options.schema.map((element) => element.name);
            }
            if (Array.isArray(keyOrKeys)) {
                return this.getDataMultiple(keyOrKeys);
            }
            return this.getDataSingle(keyOrKeys);
        });
    }
    /**
     * Since {@link ERC725.getData | `getData`} exclusively returns data that is stored on the blockchain, `fetchData` comes in handy.
     * Additionally to the data from the blockchain, `fetchData` also returns data from IPFS or HTTP(s) endpoints
     * stored as [`JSONURL`](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md#jsonurl) or [`ASSETURL`](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md#asseturl).
     *
     * :::info
     * To ensure **data authenticity** `fetchData` compares the `hash` of the fetched JSON with the `hash` stored on the blockchain.
     * :::
     *
     * @param {string} keyOrKeys The name (or the encoded name as the schema ‘key’) of the schema element in the class instance’s schema.
     * @param {ERC725JSONSchema} customSchema An optional custom schema element to use for decoding the returned value. Overrides attached schema of the class instance on this call only.
     * @returns Returns the fetched and decoded value depending ‘valueContent’ for the schema element, otherwise works like getData
     *
     * ```javascript title="getData - all keys from schema"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/fetchData.js#L7-L35
     * ```
     *
     * ```javascript reference title="getData - one key  "
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/fetchData.js#L37-L51
     * ```
     *
     * ```javascript reference title="getData - many keys"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/fetchData.js#L53-L71
     * ```
     */
    fetchData(keyOrKeys) {
        return __awaiter(this, void 0, void 0, function* () {
            const dataFromChain = yield this.getData(keyOrKeys);
            const dataFromExternalSources = yield this.getDataFromExternalSources(dataFromChain);
            return Object.assign(Object.assign({}, dataFromChain), dataFromExternalSources);
        });
    }
    getDataFromExternalSources(dataFromChain) {
        return Object.entries(dataFromChain)
            .filter(([key]) => {
            const keySchema = getSchemaElement(this.options.schema, key);
            return ['jsonurl', 'asseturl'].includes(keySchema.valueContent.toLowerCase());
        })
            .reduce((accumulator, [key, dataEntry]) => __awaiter(this, void 0, void 0, function* () {
            let receivedData;
            try {
                const { url } = this.patchIPFSUrlsIfApplicable(dataEntry);
                receivedData = yield fetch(url).then((response) => __awaiter(this, void 0, void 0, function* () {
                    if (dataEntry.hashFunction ===
                        SUPPORTED_HASH_FUNCTION_STRINGS.KECCAK256_BYTES) {
                        return response
                            .arrayBuffer()
                            .then((buffer) => new Uint8Array(buffer));
                    }
                    return response.json();
                }));
            }
            catch (error) {
                console.error(error, `GET request to ${dataEntry.url} failed`);
                throw error;
            }
            accumulator[key] = isDataAuthentic(receivedData, dataEntry.hash, dataEntry.hashFunction)
                ? receivedData
                : null;
            return accumulator;
        }), {});
    }
    encodeData(data) {
        return encodeData(data, this.options.schema);
    }
    decodeData(data) {
        return decodeData(data, this.options.schema);
    }
    /**
     * An added utility method which simply returns the owner of the contract.
     * Not directly related to ERC725 specifications.
     *
     * @param {string} [address]
     * @returns The address of the contract owner as stored in the contract.
     *
     * :::warning
     *    This method is not yet supported when using the `graph` provider type.
     * :::
     *
     * ```javascript title="Example"
     * await myERC725.getOwner();
     * // '0x94933413384997F9402cc07a650e8A34d60F437A'
     *
     * await myERC725.getOwner("0x3000783905Cc7170cCCe49a4112Deda952DDBe24");
     * // '0x7f1b797b2Ba023Da2482654b50724e92EB5a7091'
     * ```
     */
    getOwner(_address) {
        return __awaiter(this, void 0, void 0, function* () {
            const { address, provider } = this.getAddressAndProvider();
            return provider.getOwner(_address || address);
        });
    }
    /**
     * @internal
     * @param schema associated with the schema with keyType = 'Array'
     *               the data includes the raw (encoded) length key-value pair for the array
     * @param data array of key-value pairs, one of which is the length key for the schema array
     *             Data can hold other field data not relevant here, and will be ignored
     * @return an array of keys/values
     */
    getArrayValues(schema, data) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (schema.keyType !== 'Array') {
                throw new Error(`The "getArrayValues" method requires a schema definition with "keyType: Array",
         ${schema}`);
            }
            const results = [];
            // 1. get the array length
            const value = data[schema.key]; // get the length key/value pair
            if (!value || !value.value) {
                return results;
            } // Handle empty/non-existent array
            const arrayLength = yield decodeKeyValue('Number', 'uint256', value.value, schema.name); // get the int array length
            const arrayElementKeys = [];
            for (let index = 0; index < arrayLength; index++) {
                const arrayElementKey = encodeArrayKey(schema.key, index);
                if (!data[arrayElementKey]) {
                    arrayElementKeys.push(arrayElementKey);
                }
            }
            if (this.options.provider.type !== "GRAPH_QL" /* GRAPH_QL */) {
                try {
                    const arrayElements = yield ((_a = this.options.provider) === null || _a === void 0 ? void 0 : _a.getAllData(this.options.address, arrayElementKeys));
                    results.push(...arrayElements);
                }
                catch (err) {
                    // This case may happen if user requests an array key which does not exist in the contract.
                    // In this case, we simply skip
                }
                return results;
            }
            for (let index = 0; index < arrayElementKeys.length; index++) {
                // GraphQL provider has a different signature for getAllData(), it doesn't support `keys[]` parameter
                const arrayElement = yield ((_b = this.options.provider) === null || _b === void 0 ? void 0 : _b.getData(this.options.address, arrayElementKeys[index]));
                results.push({
                    key: arrayElementKeys[index],
                    value: arrayElement,
                });
            }
            return results;
        });
    }
    getDataSingle(data) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const keySchema = getSchemaElement(this.options.schema, data);
            const rawData = yield ((_a = this.options.provider) === null || _a === void 0 ? void 0 : _a.getData(this.options.address, keySchema.key));
            // Decode and return the data
            if (keySchema.keyType.toLowerCase() === 'array') {
                const dataKeyValue = {
                    [keySchema.key]: { key: keySchema.key, value: rawData },
                };
                const arrayValues = yield this.getArrayValues(keySchema, dataKeyValue);
                if (arrayValues && arrayValues.length > 0) {
                    arrayValues.push(dataKeyValue[keySchema.key]); // add the raw data array length
                    return {
                        [keySchema.name]: decodeKey(keySchema, arrayValues),
                    };
                }
                return { [keySchema.name]: [] }; // return empty object if there are no arrayValues
            }
            return {
                [keySchema.name]: decodeKey(keySchema, rawData),
            };
        });
    }
    getDataMultiple(keyNames) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const keyHashes = keyNames.map((keyName) => {
                const schemaElement = getSchemaElement(this.options.schema, keyName);
                return schemaElement.key;
            });
            // Get all the raw data from the provider based on schema key hashes
            const allRawData = yield ((_a = this.options.provider) === null || _a === void 0 ? void 0 : _a.getAllData(this.options.address, keyHashes));
            if (((_b = this.options.provider) === null || _b === void 0 ? void 0 : _b.type) === "GRAPH_QL" /* GRAPH_QL */) {
                // If the provider type is a graphql client, we assume it can get ALL keys (including array keys)
                return allRawData.reduce((accumulator, current) => {
                    accumulator[current.key] = current.value;
                    return accumulator;
                }, {});
            }
            const tmpData = allRawData.reduce((accumulator, current) => {
                accumulator[current.key] = current.value;
                return accumulator;
            }, {});
            // Get missing 'Array' fields for all arrays, as necessary
            const arraySchemas = this.options.schema.filter((e) => e.keyType.toLowerCase() === 'array');
            // eslint-disable-next-line no-restricted-syntax
            for (const keySchema of arraySchemas) {
                const dataKeyValue = {
                    [keySchema.key]: { key: keySchema.key, value: tmpData[keySchema.key] },
                };
                const arrayValues = yield this.getArrayValues(keySchema, dataKeyValue);
                if (arrayValues && arrayValues.length > 0) {
                    arrayValues.push(dataKeyValue[keySchema.key]); // add the raw data array length
                    tmpData[keySchema.key] = arrayValues;
                }
            }
            return decodeData(tmpData, this.options.schema);
        });
    }
    /**
     * Changes the protocol from `ipfs://` to `http(s)://` and adds the selected IPFS gateway.
     * `ipfs://QmbKvCVEePiDKxuouyty9bMsWBAxZDGr2jhxd4pLGLx95D => https://ipfs.lukso.network/ipfs/QmbKvCVEePiDKxuouyty9bMsWBAxZDGr2jhxd4pLGLx95D`
     */
    patchIPFSUrlsIfApplicable(receivedData) {
        if (receivedData &&
            receivedData.url &&
            receivedData.url.indexOf('ipfs://') !== -1) {
            return Object.assign(Object.assign({}, receivedData), { url: receivedData.url.replace('ipfs://', this.options.config.ipfsGateway) });
        }
        return receivedData;
    }
    getAddressAndProvider() {
        if (!isAddress(this.options.address)) {
            throw new Error('Missing ERC725 contract address.');
        }
        if (!this.options.provider) {
            throw new Error('Missing provider.');
        }
        return {
            address: this.options.address,
            provider: this.options.provider,
        };
    }
}
export default ERC725;
//# sourceMappingURL=data:application/json;base64,