/**
 * @file lib/utils.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
import { KeyValuePair, JSONURLDataToEncode } from '../types';
import { ERC725JSONSchema, GenericSchema, ERC725JSONSchemaKeyType, ERC725JSONSchemaValueType } from '../types/ERC725JSONSchema';
import { SUPPORTED_HASH_FUNCTIONS } from './constants';
/**
 *
 * @param {string} valueContent as per ERC725Schema definition
 * @param {string} valueType as per ERC725Schema definition
 * @param value can contain single value, an array, or an object as required by schema (JSONURL, or ASSETURL)
 * @param {string} [name]
 * @return the encoded value as per the schema
 */
export declare function encodeKeyValue(valueContent: string, valueType: ERC725JSONSchemaValueType, value: string | string[] | JSONURLDataToEncode | JSONURLDataToEncode[], name?: string): any;
/**
 *
 * @param key The schema key of a schema with keyType = 'Array'
 * @param index An integer representing the intended array index
 * @return The raw bytes key for the array element
 */
export declare function encodeArrayKey(key: string, index: number): string;
/**
 *
 * @param keyName the schema key name
 * @returns a guess of the schema key type
 */
export declare function guessKeyTypeFromKeyName(keyName: string): ERC725JSONSchemaKeyType;
/**
 *
 * @param name the schema element name
 * @return the name of the key encoded as per specifications
 * @return a string of the encoded schema name
 */
export declare function encodeKeyName(name: string): string;
/**
 *
 * @param schemas An array of ERC725JSONSchema objects
 * @param {string} key A string of either the schema element name, or key
 * @return The requested schema element from the full array of schemas
 */
export declare function getSchemaElement(schemas: ERC725JSONSchema[], key: string): ERC725JSONSchema;
/**
 *
 * @param schema is an object of a schema definitions
 * @param value will be either key-value pairs for a key type of Array, or a single value for type Singleton
 * @return the encoded value for the key as per the supplied schema
 */
export declare function encodeKey(schema: ERC725JSONSchema, value: string | string[] | JSONURLDataToEncode | JSONURLDataToEncode[]): any;
/**
 *
 * @param {string} valueContent as per ERC725Schema definition
 * @param {string} valueType as per ERC725Schema definition
 * @param {string} value the encoded value as string
 * @param {string} [name]
 * @return the decoded value as per the schema
 */
export declare function decodeKeyValue(valueContent: string, valueType: ERC725JSONSchemaValueType, value: any, name?: string): any;
/**
 *
 * @param schema is an object of a schema definitions
 * @param value will be either key-value pairs for a key type of Array, or a single value for type Singleton
 * @return the decoded value/values as per the schema definition
 */
export declare function decodeKey(schema: ERC725JSONSchema, value: any): any;
/**
 *
 * @param schema schema is an array of objects of schema definitions
 * @param data data is an array of objects of key-value pairs
 * @return: all decoded data as per required by the schema and provided data
 */
export declare function decodeData<Schema extends GenericSchema, T extends keyof Schema>(data: {
    [K in T]: Schema[T]['decodeData']['inputTypes'];
}, schema: ERC725JSONSchema[]): {
    [K in T]: Schema[T]['decodeData']['returnValues'];
};
/**
 * @param schema an array of schema definitions as per ${@link ERC725JSONSchema}
 * @param data an object of key-value pairs
 */
export declare function encodeData<Schema extends GenericSchema, T extends keyof Schema>(data: {
    [K in T]: Schema[T]['encodeData']['inputTypes'];
}, schema: ERC725JSONSchema[]): {
    [K in T]: Schema[T]['encodeData']['returnValues'];
};
export declare function getHashFunction(hashFunctionNameOrHash: string): {
    method: Function;
    name: import("./constants").SUPPORTED_HASH_FUNCTION_STRINGS;
    sig: SUPPORTED_HASH_FUNCTIONS;
};
export declare function hashData(data: unknown, hashFunctionNameOrHash: SUPPORTED_HASH_FUNCTIONS): string;
/**
 * Hashes the data received with the specified hashing function,
 * and compares the result with the provided hash.
 */
export declare function isDataAuthentic(data: any, expectedHash: string, lowerCaseHashFunction: SUPPORTED_HASH_FUNCTIONS): boolean;
/**
 * Transform the object containing the encoded data into an array ordered by keys,
 * for easier handling when writing the data to the blockchain.
 *
 * @param {{
 *   [key: string]: any;
 * }} encodedData This is essentially the object you receive when calling `encodeData(...)`
 * @return {*}  KeyValuePair[] An array of key-value objects
 */
export declare function flattenEncodedData(encodedData: {
    [key: string]: any;
}): KeyValuePair[];
