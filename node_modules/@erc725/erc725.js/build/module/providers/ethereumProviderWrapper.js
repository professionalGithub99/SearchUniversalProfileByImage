/*
    This file is part of @erc725/erc725.js.
    @erc725/erc725.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    @erc725/erc725.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file providers/ethereumProviderWrapper.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
  This file will handle querying the Ethereum provider api in accordance with
  implementation of smart contract interfaces of ERC725
*/
import * as abi from 'web3-eth-abi';
import { ERC725_VERSION, INTERFACE_IDS, METHODS } from '../lib/constants';
import { decodeResult as decodeResultUtils } from '../lib/provider-wrapper-utils';
import { Method } from '../types/Method';
// @ts-ignore
const web3Abi = abi.default;
// https://docs.metamask.io/guide/ethereum-provider.html
export class EthereumProviderWrapper {
    constructor(provider) {
        this.type = "ETHEREUM" /* ETHEREUM */;
        this.provider = provider;
    }
    getOwner(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = this.constructJSONRPC(address, Method.OWNER);
            const result = yield this.callContract([params]);
            if (result.error) {
                throw result.error;
            }
            return this.decodeResult(Method.OWNER, result);
        });
    }
    getErc725YVersion(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const isErc725Y = yield this.supportsInterface(address, INTERFACE_IDS.ERC725Y);
            if (isErc725Y) {
                return ERC725_VERSION.ERC725;
            }
            const isErc725YLegacy = yield this.supportsInterface(address, INTERFACE_IDS.ERC725Y_LEGACY);
            return isErc725YLegacy
                ? ERC725_VERSION.ERC725_LEGACY
                : ERC725_VERSION.NOT_ERC725;
        });
    }
    /**
     * https://eips.ethereum.org/EIPS/eip-165
     *
     * @param address the smart contract address
     * @param interfaceId ERC-165 identifier as described here: https://github.com/ERC725Alliance/ERC725/blob/develop/docs/ERC-725.md#specification
     */
    supportsInterface(address, interfaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.decodeResult(Method.SUPPORTS_INTERFACE, yield this.callContract([
                this.constructJSONRPC(address, Method.SUPPORTS_INTERFACE, `${interfaceId}${'00000000000000000000000000000000000000000000000000000000'}`),
            ]));
        });
    }
    getData(address, keyHash, providedErc725Version) {
        return __awaiter(this, void 0, void 0, function* () {
            const erc725Version = providedErc725Version !== null && providedErc725Version !== void 0 ? providedErc725Version : (yield this.getErc725YVersion(address));
            switch (erc725Version) {
                case 'ERC725':
                    return this.decodeResult(Method.GET_DATA, yield this.callContract([
                        this.constructJSONRPC(address, Method.GET_DATA, web3Abi.encodeParameter('bytes32[]', [keyHash])),
                    ]))[0];
                case 'ERC725_LEGACY':
                    return this.decodeResult(Method.GET_DATA_LEGACY, yield this.callContract([
                        this.constructJSONRPC(address, Method.GET_DATA_LEGACY, keyHash),
                    ]));
                default:
                    throw new Error(`Contract: ${address} does not support ERC725Y interface.`);
            }
        });
    }
    getAllData(address, keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            const erc725Version = yield this.getErc725YVersion(address);
            for (let index = 0; index < keys.length; index++) {
                // TODO: call getData with array instead of multiple calls with 1 element
                const value = yield this.getData(address, keys[index], erc725Version);
                results.push({
                    key: keys[index],
                    // TODO: get the interface id here to prevent multiple calls in getData
                    value,
                });
            }
            return results;
        });
    }
    // eslint-disable-next-line class-methods-use-this
    constructJSONRPC(address, method, methodParam) {
        const data = methodParam
            ? METHODS[method].sig + methodParam.replace('0x', '')
            : METHODS[method].sig;
        return {
            to: address,
            gas: METHODS[method].gas,
            gasPrice: METHODS[method].gasPrice,
            value: METHODS[method].value,
            data,
        };
    }
    callContract(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.request({ method: 'eth_call', params });
        });
    }
    // eslint-disable-next-line class-methods-use-this
    decodeResult(method, result) {
        return decodeResultUtils(method, { result });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoZXJldW1Qcm92aWRlcldyYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL2V0aGVyZXVtUHJvdmlkZXJXcmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7RUFZRTtBQUNGOzs7O0dBSUc7Ozs7Ozs7Ozs7QUFFSDs7O0VBR0U7QUFFRixPQUFPLEtBQUssR0FBRyxNQUFNLGNBQWMsQ0FBQztBQUVwQyxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsWUFBWSxJQUFJLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3pDLGFBQWE7QUFDYixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO0FBRTVCLHdEQUF3RDtBQUN4RCxNQUFNLE9BQU8sdUJBQXVCO0lBR2xDLFlBQVksUUFBYTtRQUN2QixJQUFJLENBQUMsSUFBSSw0QkFBeUIsQ0FBQztRQUNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUssUUFBUSxDQUFDLE9BQWU7O1lBQzVCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakQsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO2dCQUNoQixNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDcEI7WUFFRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRCxDQUFD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