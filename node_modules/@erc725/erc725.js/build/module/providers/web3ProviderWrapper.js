/*
    This file is part of @erc725/erc725.js.
    @erc725/erc725.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    @erc725/erc725.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file providers/web3ProviderWrapper.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
  This file will handle querying the Ethereum web3 rpc based on a given provider
  in accordance with implementation of smart contract interfaces of ERC725
*/
import AbiCoder from 'web3-eth-abi';
import { Method } from '../types/Method';
import { constructJSONRPC, decodeResult } from '../lib/provider-wrapper-utils';
import { ERC725_VERSION, INTERFACE_IDS } from '../lib/constants';
// TS can't get the types from the import...
// @ts-ignore
const abiCoder = AbiCoder;
export class Web3ProviderWrapper {
    constructor(provider) {
        this.type = "WEB3" /* WEB3 */;
        this.provider = provider;
    }
    getOwner(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.callContract(constructJSONRPC(address, Method.OWNER));
            if (result.error) {
                throw result.error;
            }
            return decodeResult(Method.OWNER, result);
        });
    }
    getErc725YVersion(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const isErc725Y = yield this.supportsInterface(address, INTERFACE_IDS.ERC725Y);
            if (isErc725Y) {
                return ERC725_VERSION.ERC725;
            }
            const isErc725YLegacy = yield this.supportsInterface(address, INTERFACE_IDS.ERC725Y_LEGACY);
            return isErc725YLegacy
                ? ERC725_VERSION.ERC725_LEGACY
                : ERC725_VERSION.NOT_ERC725;
        });
    }
    /**
     * https://eips.ethereum.org/EIPS/eip-165
     *
     * @param address the smart contract address
     * @param interfaceId ERC-165 identifier as described here: https://github.com/ERC725Alliance/ERC725/blob/develop/docs/ERC-725.md#specification
     */
    supportsInterface(address, interfaceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return decodeResult(Method.SUPPORTS_INTERFACE, yield this.callContract(constructJSONRPC(address, Method.SUPPORTS_INTERFACE, `${interfaceId}${'00000000000000000000000000000000000000000000000000000000'}`)));
        });
    }
    getData(address, keyHash) {
        return __awaiter(this, void 0, void 0, function* () {
            const erc725Version = yield this.getErc725YVersion(address);
            switch (erc725Version) {
                case 'ERC725': {
                    return decodeResult(Method.GET_DATA, yield this.callContract(constructJSONRPC(address, Method.GET_DATA, abiCoder.encodeParameter('bytes32[]', [keyHash]))))[0];
                }
                case 'ERC725_LEGACY': {
                    return decodeResult(Method.GET_DATA_LEGACY, yield this.callContract(constructJSONRPC(address, Method.GET_DATA_LEGACY, keyHash)));
                }
                default:
                    throw new Error(`Contract: ${address} does not support ERC725Y interface.`);
            }
        });
    }
    getAllData(address, keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const erc725Version = yield this.getErc725YVersion(address);
            if (erc725Version === 'NOT_ERC725') {
                throw new Error(`Contract: ${address} does not support ERC725Y interface.`);
            }
            const method = erc725Version === 'ERC725' ? Method.GET_DATA : Method.GET_DATA_LEGACY;
            const payload = [];
            for (let index = 0; index < keys.length; index++) {
                payload.push(constructJSONRPC(address, method, erc725Version === 'ERC725'
                    ? abiCoder.encodeParameter('bytes32[]', [keys[index]])
                    : keys[index]));
            }
            const results = yield this.callContract(payload);
            // map results to keys
            const returnValues = [];
            for (let index = 0; index < payload.length; index++) {
                const decodedValue = decodeResult(method, results.find((element) => payload[index].id === element.id));
                returnValues.push({
                    key: keys[index],
                    value: erc725Version === 'ERC725' ? decodedValue[0] : decodedValue,
                });
            }
            return returnValues;
        });
    }
    callContract(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                // Send old web3 method with callback to resolve promise
                this.provider.send(payload, (e, r) => {
                    if (e) {
                        reject(e);
                    }
                    else {
                        resolve(r);
                    }
                });
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViM1Byb3ZpZGVyV3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm92aWRlcnMvd2ViM1Byb3ZpZGVyV3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0VBWUU7QUFDRjs7OztHQUlHOzs7Ozs7Ozs7O0FBRUg7OztFQUdFO0FBRUYsT0FBTyxRQUFRLE1BQU0sY0FBYyxDQUFDO0FBR3BDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFL0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRSw0Q0FBNEM7QUFDNUMsYUFBYTtBQUNiLE1BQU0sUUFBUSxHQUFzQixRQUFRLENBQUM7QUFFN0MsTUFBTSxPQUFPLG1CQUFtQjtJQUc5QixZQUFZLFFBQWE7UUFDdkIsSUFBSSxDQUFDLElBQUksb0JBQXFCLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVLLFFBQVEsQ0FBQyxPQUFlOztZQUM1QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQ3BDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQ3hDLENBQUM7WUFDRixJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7Z0JBQ2hCLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNwQjtZQUVELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUMsQ0FBQztLQUFBO0lBRUssaUJBQWlCLENBQUMsT0FBZTs7WUFDckMsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQzVDLE9BQU8sRUFDUCxhQUFh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