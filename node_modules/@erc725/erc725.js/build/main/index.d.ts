import { ERC725JSONSchema, ERC725JSONSchemaKeyType, ERC725JSONSchemaValueContent, ERC725JSONSchemaValueType, GenericSchema } from './types/ERC725JSONSchema';
import { ERC725Config } from './types/Config';
export { ERC725JSONSchema, ERC725JSONSchemaKeyType, ERC725JSONSchemaValueContent, ERC725JSONSchemaValueType, };
export { ERC725Config, KeyValuePair, ProviderTypes } from './types';
export { flattenEncodedData, encodeData } from './lib/utils';
/**
 * :::warning
 * This package is currently in early stages of development, <br/>use only for testing or experimentation purposes.<br/>
 * :::
 *
 * @typeParam Schema **Work in progress, nothing to see here**.
 *
 */
export declare class ERC725<Schema extends GenericSchema> {
    options: {
        schema: ERC725JSONSchema[];
        address?: string;
        provider?: any;
        config: ERC725Config;
    };
    /**
     * Creates an instance of ERC725.
     *
     * ```js reference title="Instantiation"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/instantiation.js#L1-L50
     * ```
     *
     * @param {ERC725JSONSchema[]} schema More information available here: [LSP-2-ERC725YJSONSchema](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md)
     * @param {string} address Address of the ERC725 contract you want to interact with
     * @param {any} provider
     * @param {ERC725Config} config Configuration object.
     *
     */
    constructor(schema: ERC725JSONSchema[], address?: any, provider?: any, config?: ERC725Config);
    private initializeProvider;
    /**
     * Gets **decoded data** for one, many or all keys of the specified `ERC725` smart-contract.
     * When omitting the `keyOrKeys` parameter, it will get all the keys (as per {@link ERC725JSONSchema | ERC725JSONSchema} definition).
     *
     * :::caution
     * Data returned by this function does not contain external data of [`JSONURL`](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md#jsonurl)
     * or [`ASSETURL`](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md#asseturl) schema elements.
     *
     * If you would like to receive everything in one go, you can use {@link ERC725.fetchData | `fetchData`} for that.
     * :::
     *
     * @returns An object with schema element key names as properties, with corresponding **decoded** data as values.
     *
     * ```javascript reference title="getData - all keys from schema"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/getData.js#L7-L30
     * ```
     *
     * ```javascript reference title="getData - one key  "
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/getData.js#L32-L41
     * ```
     *
     * ```javascript reference title="getData - many keys"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/getData.js#L43-L56
     * ```
     */
    getData(keyOrKeys?: string | string[]): Promise<{
        [key: string]: any;
    }>;
    /**
     * Since {@link ERC725.getData | `getData`} exclusively returns data that is stored on the blockchain, `fetchData` comes in handy.
     * Additionally to the data from the blockchain, `fetchData` also returns data from IPFS or HTTP(s) endpoints
     * stored as [`JSONURL`](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md#jsonurl) or [`ASSETURL`](https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md#asseturl).
     *
     * :::info
     * To ensure **data authenticity** `fetchData` compares the `hash` of the fetched JSON with the `hash` stored on the blockchain.
     * :::
     *
     * @param {string} keyOrKeys The name (or the encoded name as the schema ‘key’) of the schema element in the class instance’s schema.
     * @param {ERC725JSONSchema} customSchema An optional custom schema element to use for decoding the returned value. Overrides attached schema of the class instance on this call only.
     * @returns Returns the fetched and decoded value depending ‘valueContent’ for the schema element, otherwise works like getData
     *
     * ```javascript title="getData - all keys from schema"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/fetchData.js#L7-L35
     * ```
     *
     * ```javascript reference title="getData - one key  "
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/fetchData.js#L37-L51
     * ```
     *
     * ```javascript reference title="getData - many keys"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/fetchData.js#L53-L71
     * ```
     */
    fetchData(keyOrKeys?: string | string[]): Promise<{
        [key: string]: any;
    }>;
    private getDataFromExternalSources;
    /**
     * To be able to store your data on the blockchain, you need to encode it according to your {@link ERC725JSONSchema}.
     *
     * @param {{ [key: string]: any }} data An object with one or many properties, containing the data that needs to be encoded.
     * @returns An object with the same keys as the object that was passed in as a parameter containing the encoded data, ready to be stored on the blockchain.
     *
     * ```javascript reference title="Encoding object with one key"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/encodeData.js#L7-L19
     * ```
     *
     * ```javascript reference title="Encoding object with one key"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/encodeData.js#L22-L37
     * ```
     *
     * ```javascript reference title="Encoding object with one key"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/encodeData.js#L39-L67
     * ```
     *
     * :::tip
     * When encoding JSON it is possible to pass in the JSON object and the URL where it is available publicly.
     * The JSON will be hashed with `keccak256`.
     * :::
     */
    encodeData(data: {
        [key: string]: any;
    }): {
        [key: string]: any;
    };
    /**
     * In case you are reading the key-value store from an ERC725 smart-contract key-value store
     * without `@erc725/erc725.js` you can use `decodeData` to do the decoding for you.
     *
     * :::tip
     * It is more convenient to use {@link ERC725.fetchData | `fetchData`}.
     * It does the `decoding` and `fetching` of external references for you automatically.
     * :::
     *
     * @param {{ [key: string]: any }} data An object with one or many properties.
     * @returns Returns decoded data as defined and expected in the schema:
     *
     * ```javascript reference title="Decode one key"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/decodeData.js#L7-L19
     * ```
     *
     * ```javascript reference title="Decode multiple keys"
     * https://github.com/ERC725Alliance/erc725.js/tree/main/examples/src/decodeData.js#L21-L49
     * ```
     */
    decodeData(data: {
        [key: string]: any;
    }): {
        [key: string]: any;
    };
    /**
     * An added utility method which simply returns the owner of the contract.
     * Not directly related to ERC725 specifications.
     *
     * @param {string} [address]
     * @returns The address of the contract owner as stored in the contract.
     *
     * :::warning
     *    This method is not yet supported when using the `graph` provider type.
     * :::
     *
     * ```javascript title="Example"
     * await myERC725.getOwner();
     * // '0x94933413384997F9402cc07a650e8A34d60F437A'
     *
     * await myERC725.getOwner("0x3000783905Cc7170cCCe49a4112Deda952DDBe24");
     * // '0x7f1b797b2Ba023Da2482654b50724e92EB5a7091'
     * ```
     */
    getOwner(_address?: string): Promise<any>;
    /**
     * @internal
     * @param schema associated with the schema with keyType = 'Array'
     *               the data includes the raw (encoded) length key-value pair for the array
     * @param data array of key-value pairs, one of which is the length key for the schema array
     *             Data can hold other field data not relevant here, and will be ignored
     * @return an array of keys/values
     */
    private getArrayValues;
    private getDataSingle;
    private getDataMultiple;
    /**
     * Changes the protocol from `ipfs://` to `http(s)://` and adds the selected IPFS gateway.
     * `ipfs://QmbKvCVEePiDKxuouyty9bMsWBAxZDGr2jhxd4pLGLx95D => https://ipfs.lukso.network/ipfs/QmbKvCVEePiDKxuouyty9bMsWBAxZDGr2jhxd4pLGLx95D`
     */
    private patchIPFSUrlsIfApplicable;
    private getAddressAndProvider;
}
export default ERC725;
