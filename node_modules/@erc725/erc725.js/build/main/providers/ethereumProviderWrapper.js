"use strict";
/*
    This file is part of @erc725/erc725.js.
    @erc725/erc725.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    @erc725/erc725.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file providers/ethereumProviderWrapper.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumProviderWrapper = void 0;
/*
  This file will handle querying the Ethereum provider api in accordance with
  implementation of smart contract interfaces of ERC725
*/
const abi = __importStar(require("web3-eth-abi"));
const constants_1 = require("../lib/constants");
const provider_wrapper_utils_1 = require("../lib/provider-wrapper-utils");
const Method_1 = require("../types/Method");
// @ts-ignore
const web3Abi = abi.default;
// https://docs.metamask.io/guide/ethereum-provider.html
class EthereumProviderWrapper {
    constructor(provider) {
        this.type = "ETHEREUM" /* ETHEREUM */;
        this.provider = provider;
    }
    async getOwner(address) {
        const params = this.constructJSONRPC(address, Method_1.Method.OWNER);
        const result = await this.callContract([params]);
        if (result.error) {
            throw result.error;
        }
        return this.decodeResult(Method_1.Method.OWNER, result);
    }
    async getErc725YVersion(address) {
        const isErc725Y = await this.supportsInterface(address, constants_1.INTERFACE_IDS.ERC725Y);
        if (isErc725Y) {
            return constants_1.ERC725_VERSION.ERC725;
        }
        const isErc725YLegacy = await this.supportsInterface(address, constants_1.INTERFACE_IDS.ERC725Y_LEGACY);
        return isErc725YLegacy
            ? constants_1.ERC725_VERSION.ERC725_LEGACY
            : constants_1.ERC725_VERSION.NOT_ERC725;
    }
    /**
     * https://eips.ethereum.org/EIPS/eip-165
     *
     * @param address the smart contract address
     * @param interfaceId ERC-165 identifier as described here: https://github.com/ERC725Alliance/ERC725/blob/develop/docs/ERC-725.md#specification
     */
    async supportsInterface(address, interfaceId) {
        return this.decodeResult(Method_1.Method.SUPPORTS_INTERFACE, await this.callContract([
            this.constructJSONRPC(address, Method_1.Method.SUPPORTS_INTERFACE, `${interfaceId}${'00000000000000000000000000000000000000000000000000000000'}`),
        ]));
    }
    async getData(address, keyHash, providedErc725Version) {
        const erc725Version = providedErc725Version !== null && providedErc725Version !== void 0 ? providedErc725Version : (await this.getErc725YVersion(address));
        switch (erc725Version) {
            case 'ERC725':
                return this.decodeResult(Method_1.Method.GET_DATA, await this.callContract([
                    this.constructJSONRPC(address, Method_1.Method.GET_DATA, web3Abi.encodeParameter('bytes32[]', [keyHash])),
                ]))[0];
            case 'ERC725_LEGACY':
                return this.decodeResult(Method_1.Method.GET_DATA_LEGACY, await this.callContract([
                    this.constructJSONRPC(address, Method_1.Method.GET_DATA_LEGACY, keyHash),
                ]));
            default:
                throw new Error(`Contract: ${address} does not support ERC725Y interface.`);
        }
    }
    async getAllData(address, keys) {
        const results = [];
        const erc725Version = await this.getErc725YVersion(address);
        for (let index = 0; index < keys.length; index++) {
            // TODO: call getData with array instead of multiple calls with 1 element
            const value = await this.getData(address, keys[index], erc725Version);
            results.push({
                key: keys[index],
                // TODO: get the interface id here to prevent multiple calls in getData
                value,
            });
        }
        return results;
    }
    // eslint-disable-next-line class-methods-use-this
    constructJSONRPC(address, method, methodParam) {
        const data = methodParam
            ? constants_1.METHODS[method].sig + methodParam.replace('0x', '')
            : constants_1.METHODS[method].sig;
        return {
            to: address,
            gas: constants_1.METHODS[method].gas,
            gasPrice: constants_1.METHODS[method].gasPrice,
            value: constants_1.METHODS[method].value,
            data,
        };
    }
    async callContract(params) {
        return this.provider.request({ method: 'eth_call', params });
    }
    // eslint-disable-next-line class-methods-use-this
    decodeResult(method, result) {
        return provider_wrapper_utils_1.decodeResult(method, { result });
    }
}
exports.EthereumProviderWrapper = EthereumProviderWrapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoZXJldW1Qcm92aWRlcldyYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL2V0aGVyZXVtUHJvdmlkZXJXcmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7O0VBWUU7QUFDRjs7OztHQUlHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUg7OztFQUdFO0FBRUYsa0RBQW9DO0FBRXBDLGdEQUEwRTtBQUMxRSwwRUFBa0Y7QUFDbEYsNENBQXlDO0FBR3pDLGFBQWE7QUFDYixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO0FBRTVCLHdEQUF3RDtBQUN4RCxNQUFhLHVCQUF1QjtJQUdsQyxZQUFZLFFBQWE7UUFDdkIsSUFBSSxDQUFDLElBQUksNEJBQXlCLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBZTtRQUM1QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNoQixNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDcEI7UUFFRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsS0FBSyxDQUFDLGlCQUFpQixDQUFDLE9BQWU7UUFDckMsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQzVDLE9BQU8sRUFDUCx5QkFBYSxDQUFDLE9BQU8sQ0FDdEIsQ0FBQztRQUVGLElBQUks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