"use strict";
/*
    This file is part of @erc725/erc725.js.
    @erc725/erc725.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    @erc725/erc725.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file lib/utils.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.flattenEncodedData = exports.isDataAuthentic = exports.hashData = exports.getHashFunction = exports.encodeData = exports.decodeData = exports.decodeKey = exports.decodeKeyValue = exports.encodeKey = exports.getSchemaElement = exports.encodeKeyName = exports.guessKeyTypeFromKeyName = exports.encodeArrayKey = exports.encodeKeyValue = void 0;
const web3_utils_1 = require("web3-utils");
const constants_1 = require("./constants");
const encoder_1 = require("./encoder");
/**
 *
 * @param {string} valueContent as per ERC725Schema definition
 * @param {string} valueType as per ERC725Schema definition
 * @param value can contain single value, an array, or an object as required by schema (JSONURL, or ASSETURL)
 * @param {string} [name]
 * @return the encoded value as per the schema
 */
function encodeKeyValue(valueContent, valueType, value, name) {
    const isSupportedValueContent = encoder_1.valueContentEncodingMap[valueContent] || valueContent.substr(0, 2) === '0x';
    if (!isSupportedValueContent) {
        throw new Error(`The valueContent '${valueContent}' 
            for ${name} is not supported.`);
    }
    let result;
    const sameEncoding = encoder_1.valueContentEncodingMap[valueContent] &&
        encoder_1.valueContentEncodingMap[valueContent].type === valueType.split('[]')[0];
    const isArray = valueType.substr(valueType.length - 2) === '[]';
    // We only loop if the valueType done by abi.encodeParameter can not handle it directly
    if (Array.isArray(value) && !sameEncoding) {
        // value type encoding will handle it?
        // we handle an array element encoding
        const results = [];
        for (let index = 0; index < value.length; index++) {
            const element = value[index];
            results.push(encoder_1.encodeValueContent(valueContent, element));
        }
        result = results;
    }
    else if (!isArray && !Array.isArray(value)) {
        // Straight forward encode
        result = encoder_1.encodeValueContent(valueContent, value);
    }
    else if (sameEncoding) {
        result = value; // leaving this for below
    }
    if (
    // and we only skip bytes regardless
    valueType !== 'bytes' &&
        // Requires encoding because !sameEncoding means both encodings are required
        !sameEncoding) {
        result = encoder_1.encodeValueType(valueType, result);
    }
    else if (isArray && sameEncoding) {
        result = encoder_1.encodeValueType(valueType, result);
    }
    return result;
}
exports.encodeKeyValue = encodeKeyValue;
/**
 *
 * @param key The schema key of a schema with keyType = 'Array'
 * @param index An integer representing the intended array index
 * @return The raw bytes key for the array element
 */
function encodeArrayKey(key, index) {
    return key.substr(0, 34) + web3_utils_1.padLeft(web3_utils_1.numberToHex(index), 32).replace('0x', '');
}
exports.encodeArrayKey = encodeArrayKey;
/**
 *
 * @param keyName the schema key name
 * @returns a guess of the schema key type
 */
function guessKeyTypeFromKeyName(keyName) {
    // This function could not work with subsequents keys of an Array
    // It will always assume the given key, if array, is the initial array key.
    const splittedKeyName = keyName.split(':');
    if (splittedKeyName.length === 3) {
        return 'Bytes20MappingWithGrouping';
    }
    if (splittedKeyName.length === 2) {
        if (splittedKeyName[1].substr(0, 2) === '0x') {
            return 'Bytes20Mapping';
        }
        return 'Mapping';
    }
    if (keyName.substring(keyName.length - 2, keyName.length) === '[]') {
        return 'Array';
    }
    return 'Singleton';
}
exports.guessKeyTypeFromKeyName = guessKeyTypeFromKeyName;
/**
 *
 * @param name the schema element name
 * @return the name of the key encoded as per specifications
 * @return a string of the encoded schema name
 */
function encodeKeyName(name) {
    const keyType = guessKeyTypeFromKeyName(name);
    switch (keyType) {
        case 'Bytes20MappingWithGrouping': {
            // bytes4(keccak256(FirstWord)) + bytes4(0) + bytes2(keccak256(SecondWord)) + bytes2(0) + bytes20(address)
            const keyNameSplit = name.split(':');
            return (web3_utils_1.keccak256(keyNameSplit[0]).substr(0, 10) +
                '00000000' +
                web3_utils_1.keccak256(keyNameSplit[1]).substr(2, 4) +
                '0000' +
                keyNameSplit[2].substr(0, 40));
        }
        case 'Bytes20Mapping': {
            // bytes8(keccak256(FirstWord)) + bytes4(0) + bytes20(address)
            const keyNameSplit = name.split(':');
            return (web3_utils_1.keccak256(keyNameSplit[0]).substr(0, 18) +
                '00000000' +
                keyNameSplit[1].substr(2, 40));
        }
        case 'Mapping': {
            // bytes16(keccak256(FirstWord)) + bytes12(0) + bytes4(keccak256(LastWord))
            const keyNameSplit = name.split(':');
            return (web3_utils_1.keccak256(keyNameSplit[0]).substr(0, 34) +
                '000000000000000000000000' +
                web3_utils_1.keccak256(keyNameSplit[1]).substr(2, 8));
        }
        case 'Array': // Warning: this can not correctly encode subsequent keys of array, only the initial Array key will work
        case 'Singleton':
            return web3_utils_1.keccak256(name);
        default:
            return web3_utils_1.keccak256(name);
    }
}
exports.encodeKeyName = encodeKeyName;
/**
 *
 * @param schemas An array of ERC725JSONSchema objects
 * @param {string} key A string of either the schema element name, or key
 * @return The requested schema element from the full array of schemas
 */
function getSchemaElement(schemas, key) {
    const keyHash = key.substr(0, 2) === '0x' ? key : encodeKeyName(key);
    const schemaElement = schemas.find((e) => e.key === keyHash);
    if (!schemaElement) {
        throw new Error('No matching schema found for key: "' + key + '" (' + keyHash + ').');
    }
    return schemaElement;
}
exports.getSchemaElement = getSchemaElement;
/**
 *
 * @param schema is an object of a schema definitions
 * @param value will be either key-value pairs for a key type of Array, or a single value for type Singleton
 * @return the encoded value for the key as per the supplied schema
 */
function encodeKey(schema, value) {
    // NOTE: This will not guarantee order of array as on chain. Assumes developer must set correct order
    const lowerCaseKeyType = schema.keyType.toLowerCase();
    switch (lowerCaseKeyType) {
        case 'array': {
            if (!Array.isArray(value)) {
                console.error("Can't encode a non array for key of type array");
                return null;
            }
            const results = [];
            for (let index = 0; index < value.length; index++) {
                const dataElement = value[index];
                if (index === 0) {
                    // This is arrayLength as the first element in the raw array
                    results.push({
                        key: schema.key,
                        value: encodeKeyValue('Number', 'uint256', value.length.toString(), schema.name),
                    });
                }
                results.push({
                    key: encodeArrayKey(schema.key, index),
                    value: encodeKeyValue(schema.valueContent, schema.valueType, dataElement, schema.name),
                });
            }
            return results;
        }
        case 'bytes20mapping':
        case 'bytes20mappingwithgrouping':
        case 'singleton':
        case 'mapping':
            return encodeKeyValue(schema.valueContent, schema.valueType, value, schema.name);
        default:
            console.error('Incorrect data match or keyType in schema from encodeKey(): "' +
                schema.keyType +
                '"');
            return null;
    }
}
exports.encodeKey = encodeKey;
/**
 *
 * @param {string} valueContent as per ERC725Schema definition
 * @param {string} valueType as per ERC725Schema definition
 * @param {string} value the encoded value as string
 * @param {string} [name]
 * @return the decoded value as per the schema
 */
function decodeKeyValue(valueContent, valueType, value, name) {
    // Check for the missing map.
    if (!encoder_1.valueContentEncodingMap[valueContent] && valueContent.substr(0, 2) !== '0x') {
        throw new Error('The valueContent "' +
            valueContent +
            '" for "' +
            name +
            '" is not supported.');
    }
    let sameEncoding = encoder_1.valueContentEncodingMap[valueContent] &&
        encoder_1.valueContentEncodingMap[valueContent].type === valueType.split('[]')[0];
    const isArray = valueType.substr(valueType.length - 2) === '[]';
    // VALUE TYPE
    if (valueType !== 'bytes' && // we ignore because all is decoded by bytes to start with (abi)
        valueType !== 'string' &&
        !web3_utils_1.isAddress(value) // checks for addresses, since technically an address is bytes?
    ) {
        // eslint-disable-next-line no-param-reassign
        value = encoder_1.decodeValueType(valueType, value);
    }
    // As per exception above, if address and sameEncoding, then the address still needs to be handled
    if (sameEncoding && web3_utils_1.isAddress(value) && !web3_utils_1.checkAddressChecksum(value)) {
        sameEncoding = !sameEncoding;
    }
    if (sameEncoding && valueType !== 'string') {
        return value;
    }
    // VALUE CONTENT
    // We are finished if duplicated encoding methods
    if (isArray && Array.isArray(value)) {
        // value must be an array also
        const results = [];
        for (let index = 0; index < value.length; index++) {
            const element = value[index];
            results.push(encoder_1.decodeValueContent(valueContent, element));
        }
        return results;
    }
    return encoder_1.decodeValueContent(valueContent, value);
}
exports.decodeKeyValue = decodeKeyValue;
/**
 *
 * @param schema is an object of a schema definitions
 * @param value will be either key-value pairs for a key type of Array, or a single value for type Singleton
 * @return the decoded value/values as per the schema definition
 */
function decodeKey(schema, value) {
    const lowerCaseKeyType = schema.keyType.toLowerCase();
    switch (lowerCaseKeyType) {
        case 'array': {
            const results = [];
            // If user has requested a key which does not exist in the contract, value will be: 0x and value.find() will fail.
            if (!value || typeof value === 'string') {
                return results;
            }
            const valueElement = value.find((e) => e.key === schema.key);
            // Handle empty/non-existent array
            if (!valueElement) {
                return results;
            }
            const arrayLength = decodeKeyValue('Number', 'uint256', valueElement.value, schema.name) ||
                0;
            // This will not run if no match or arrayLength
            for (let index = 0; index < arrayLength; index++) {
                const dataElement = value.find((e) => e.key === encodeArrayKey(schema.key, index));
                if (dataElement) {
                    results.push(decodeKeyValue(schema.valueContent, schema.valueType, dataElement.value, schema.name));
                }
            } // end for loop
            return results;
        }
        case 'bytes20mapping':
        case 'bytes20mappingwithgrouping':
        case 'singleton':
        case 'mapping': {
            if (Array.isArray(value)) {
                const newValue = value.find((e) => e.key === schema.key);
                // Handle empty or non-values
                if (!newValue) {
                    return null;
                }
                return decodeKeyValue(schema.valueContent, schema.valueType, newValue.value, schema.name);
            }
            return decodeKeyValue(schema.valueContent, schema.valueType, value, schema.name);
        }
        default: {
            console.error('Incorrect data match or keyType in schema from decodeKey(): "' +
                schema.keyType +
                '"');
            return null;
        }
    }
}
exports.decodeKey = decodeKey;
/**
 *
 * @param schema schema is an array of objects of schema definitions
 * @param data data is an array of objects of key-value pairs
 * @return: all decoded data as per required by the schema and provided data
 */
function decodeData(data, schema) {
    return Object.entries(data).reduce((decodedData, [key, value]) => {
        const schemaElement = getSchemaElement(schema, key);
        return Object.assign(Object.assign({}, decodedData), { [schemaElement.name]: decodeKey(schemaElement, value) });
    }, {});
}
exports.decodeData = decodeData;
/**
 * @param schema an array of schema definitions as per ${@link ERC725JSONSchema}
 * @param data an object of key-value pairs
 */
function encodeData(data, schema) {
    return Object.entries(data).reduce((accumulator, [key, value]) => {
        const schemaElement = getSchemaElement(schema, key);
        accumulator[key] = {
            value: encodeKey(schemaElement, value),
            key: schemaElement.key,
        };
        return accumulator;
    }, {});
}
exports.encodeData = encodeData;
function getHashFunction(hashFunctionNameOrHash) {
    const hashFunction = constants_1.HASH_FUNCTIONS[hashFunctionNameOrHash];
    if (!hashFunction) {
        throw new Error(`Chosen hashFunction '${hashFunctionNameOrHash}' is not supported.
      Supported hashFunctions: ${constants_1.SUPPORTED_HASH_FUNCTIONS_LIST}
      `);
    }
    return hashFunction;
}
exports.getHashFunction = getHashFunction;
function hashData(data, hashFunctionNameOrHash) {
    const hashFunction = getHashFunction(hashFunctionNameOrHash);
    return hashFunction.method(data);
}
exports.hashData = hashData;
/**
 * Hashes the data received with the specified hashing function,
 * and compares the result with the provided hash.
 */
function isDataAuthentic(data, expectedHash, lowerCaseHashFunction) {
    const dataHash = hashData(data, lowerCaseHashFunction);
    if (dataHash !== expectedHash) {
        console.error(`Hash mismatch, returned JSON hash ("${dataHash}") is different from expected hash "${expectedHash}"`);
        return false;
    }
    return true;
}
exports.isDataAuthentic = isDataAuthentic;
/**
 * Transform the object containing the encoded data into an array ordered by keys,
 * for easier handling when writing the data to the blockchain.
 *
 * @param {{
 *   [key: string]: any;
 * }} encodedData This is essentially the object you receive when calling `encodeData(...)`
 * @return {*}  KeyValuePair[] An array of key-value objects
 */
function flattenEncodedData(encodedData) {
    return (Object.entries(encodedData)
        .reduce((keyValuePairs, [, encodedDataElement]) => {
        if (Array.isArray(encodedDataElement.value)) {
            return keyValuePairs.concat(encodedDataElement.value);
        }
        keyValuePairs.push({
            key: encodedDataElement.key,
            value: encodedDataElement.value,
        });
        return keyValuePairs;
    }, [])
        // sort array of objects by keys, to not be dependent on the order of the object's keys
        .sort((a, b) => {
        if (a.key < b.key)
            return -1;
        return a.key > b.key ? 1 : 0;
    }));
}
exports.flattenEncodedData = flattenEncodedData;
//# sourceMappingURL=data:application/json;base64,