// The following code is inlined from `ky-universal` because it uses ES modules and
// top-level await, which are not currently well supported by tools like Jest.
var _a, _b, _c, _d, _e, _f, _g, _h;
import { createReadableStreamWrapper, createWritableStreamWrapper, } from '@mattiasbuelens/web-streams-adapter';
import AbortController from 'abort-controller';
import FormData from 'form-data';
import fetch, { Headers, Request as RequestPF, Response as ResponsePF } from 'node-fetch';
import * as webStreams from 'web-streams-polyfill/dist/ponyfill.es2018.js';
globalThis.fetch =
    (_a = globalThis.fetch) !== null && _a !== void 0 ? _a : (async (url, options) => fetch(url, { highWaterMark: 1e7 /* 10 MB */, ...options }));
globalThis.Headers = (_b = globalThis.Headers) !== null && _b !== void 0 ? _b : Headers;
globalThis.Request = (_c = globalThis.Request) !== null && _c !== void 0 ? _c : RequestPF;
globalThis.Response = (_d = globalThis.Response) !== null && _d !== void 0 ? _d : ResponsePF;
globalThis.AbortController = (_e = globalThis.AbortController) !== null && _e !== void 0 ? _e : AbortController;
globalThis.FormData = (_f = globalThis.FormData) !== null && _f !== void 0 ? _f : FormData;
globalThis.ReadableStream = (_g = globalThis.ReadableStream) !== null && _g !== void 0 ? _g : webStreams.ReadableStream;
globalThis.WritableStream = (_h = globalThis.WritableStream) !== null && _h !== void 0 ? _h : webStreams.WritableStream;
const toReadableStreamPF = createReadableStreamWrapper(webStreams.ReadableStream);
const toWritableStreamPF = createWritableStreamWrapper(webStreams.WritableStream);
export async function pipeToPolyfill(body, sink) {
    const readablePF = toReadableStreamPF(body);
    const writablePF = toWritableStreamPF(sink);
    return readablePF.pipeTo(writablePF);
}
//# sourceMappingURL=polyfill.js.map