var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Job_client, _JobStatusReport_client;
import { makePage } from './model.js';
export var JobPhase;
(function (JobPhase) {
    JobPhase["PENDING"] = "Pending";
    JobPhase["RUNNING"] = "Running";
    JobPhase["SUCCEEDED"] = "Succeeded";
    JobPhase["FAILED"] = "Failed";
})(JobPhase || (JobPhase = {}));
/**
 * An existing, already-submitted job. The job might also be already completed.
 */
export class Job {
    constructor(client, pod) {
        _Job_client.set(this, void 0);
        __classPrivateFieldSet(this, _Job_client, client, "f");
        this.id = pod.id;
        this.createdAt = new Date(pod.createdAt);
        this.spec = pod.spec;
        this.status = pod.status;
    }
}
_Job_client = new WeakMap();
/**
 * An existing, already-submitted job. The job might also be already completed.
 */
export class JobStatusReport {
    constructor(client, pod) {
        _JobStatusReport_client.set(this, void 0);
        __classPrivateFieldSet(this, _JobStatusReport_client, client, "f");
        this.id = pod.id;
        this.status = pod.status;
    }
}
_JobStatusReport_client = new WeakMap();
const COMPUTE_EP = 'compute';
const JOBS_EP = `${COMPUTE_EP}/jobs`;
const endpointForId = (id) => `${JOBS_EP}/${id}`;
const statusEndpointForId = (id) => `${JOBS_EP}/${id}/status`;
export var ComputeImpl;
(function (ComputeImpl) {
    async function submitJob(client, spec) {
        const pod = await client.create(JOBS_EP, spec);
        return new Job(client, pod);
    }
    ComputeImpl.submitJob = submitJob;
    async function listJobs(client, filter = {}) {
        const podPage = await client.get(JOBS_EP, filter);
        return makePage(Job, podPage, client);
    }
    ComputeImpl.listJobs = listJobs;
    async function getJob(client, jobId) {
        const pod = await client.get(endpointForId(jobId));
        return new Job(client, pod);
    }
    ComputeImpl.getJob = getJob;
    async function getJobStatus(client, jobId) {
        const pod = await client.get(statusEndpointForId(jobId));
        return new JobStatusReport(client, pod);
    }
    ComputeImpl.getJobStatus = getJobStatus;
    async function terminateJob(client, jobId) {
        return client.delete(endpointForId(jobId));
    }
    ComputeImpl.terminateJob = terminateJob;
})(ComputeImpl || (ComputeImpl = {}));
//# sourceMappingURL=compute.js.map