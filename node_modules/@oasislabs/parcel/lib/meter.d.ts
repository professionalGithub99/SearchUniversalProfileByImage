import type { HttpClient } from './http';
/**
 * Filters for specifying the subset of API usage to utilize
 * when generating your metering report.
 */
export declare type GetUsageFilter = Partial<{
    after: Date;
    before: Date;
}>;
/**
 * Parameters for setting your (current) monthly usage quota.
 * This will carry on to subsequent months until you change it
 * again.
 */
export declare type QuotaUpdateParams = Partial<{
    apiCallsLimit: number;
    accessedBytesLimit: number;
    computeMsecLimit: number;
}>;
export declare type PODMeteringReport = Readonly<{
    createCount: number;
    readCount: number;
    writeCount: number;
    deleteCount: number;
    uploadCount: number;
    downloadCount: number;
    uploadSizeBytes: number;
    downloadSizeBytes: number;
    computeMsec: number;
}>;
/**
 * A metering report of your API usage.
 */
export declare class MeteringReport {
    #private;
    readonly createCount: number;
    readonly readCount: number;
    readonly writeCount: number;
    readonly deleteCount: number;
    readonly uploadCount: number;
    readonly downloadCount: number;
    readonly uploadSizeBytes: number;
    readonly downloadSizeBytes: number;
    readonly computeMsec: number;
    constructor(client: HttpClient, pod: PODMeteringReport);
}
export declare type PODMeteringQuota = Readonly<{
    apiCallsLimit: number;
    accessedBytesLimit: number;
    computeMsecLimit: number;
}>;
/**
 * Your monthly quota for API usage.
 */
export declare class MeteringQuota {
    #private;
    readonly apiCallsLimit: number;
    readonly accessedBytesLimit: number;
    readonly computeMsecLimit: number;
    constructor(client: HttpClient, pod: PODMeteringQuota);
}
export declare namespace MeterImpl {
    function getUsage(client: HttpClient, filter?: GetUsageFilter): Promise<MeteringReport>;
    function getQuota(client: HttpClient): Promise<MeteringQuota>;
    function setQuota(client: HttpClient, params: QuotaUpdateParams): Promise<MeteringQuota>;
}
//# sourceMappingURL=meter.d.ts.map