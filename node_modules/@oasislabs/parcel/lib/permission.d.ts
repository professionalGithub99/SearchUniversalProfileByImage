import type { Opaque } from 'type-fest';
import type { AppId } from './app.js';
import type { Condition } from './condition.js';
import type { HttpClient } from './http.js';
import type { IdentityId } from './identity.js';
import type { Model, Page, PageParams, PODModel, ResourceId } from './model.js';
export declare type PermissionId = Opaque<ResourceId, 'PermissionId'>;
export declare type PODPermission = Readonly<PODModel & PermissionCreateParams & {
    appId: ResourceId;
}>;
export declare type PermissionCreateParams = {
    /** The Grants to make when the App containing this Permission is joined. */
    grants: GrantSpec[];
    /** The name of this permission. */
    name: string;
    /** The description of this permission seen by users when shown in an app. */
    description: string;
    /** The text seen by users when accepting this permission. */
    allowText: string;
    /** The text seen by users when denying this permission. */
    denyText: string;
};
export declare class Permission implements Model {
    #private;
    readonly id: PermissionId;
    readonly appId: AppId;
    readonly createdAt: Date;
    /** The Grants to make when the App containing this Permission is joined. */
    readonly grants: GrantSpec[];
    readonly name: string;
    /** The description of this permission seen by users when shown in an app. */
    readonly description: string;
    /** The text seen by users when accepting this permission. */
    readonly allowText: string;
    /** The text seen by users when denying this permission. */
    readonly denyText: string;
    constructor(client: HttpClient, pod: PODPermission);
}
export declare namespace PermissionImpl {
    function create(client: HttpClient, appId: AppId, params: PermissionCreateParams): Promise<Permission>;
    function list(client: HttpClient, appId: AppId, filter?: PageParams): Promise<Page<Permission>>;
    function get(client: HttpClient, appId: AppId, permissionId: PermissionId): Promise<Permission>;
    function delete_(client: HttpClient, appId: AppId, permissionId: PermissionId): Promise<void>;
}
export declare type GrantSpec = {
    /** The symbolic granter. */
    granter: GranterRef;
    /** The symbolic grantee. */
    grantee?: GranteeRef;
    /** The Grant's condition. @see `Grant.condition`. */
    condition?: Condition;
};
/** `app` represents the app, `participant` represents the joining identity. */
export declare type GranterRef = 'app' | 'participant';
/**
 * A `ResourceId` causes the grant to be made to a specific Identity,
 * `app` grants to the app, `participant` grants to the joining identity, and
 * `everyone` refers to, well, everyone.
 */
export declare type GranteeRef = 'app' | 'participant' | 'everyone' | IdentityId;
//# sourceMappingURL=permission.d.ts.map