import type { Opaque } from 'type-fest';
import type { AppId } from './app.js';
import type { HttpClient } from './http.js';
import type { IdentityId } from './identity.js';
import type { Model, Page, PageParams, PODModel, ResourceId, WritableExcluding } from './model.js';
import type { PublicJWK } from './token.js';
export declare type ClientId = Opaque<ResourceId, 'ClientId'>;
export declare type PODBaseClient = Readonly<PODModel & {
    creator: ResourceId;
    appId: ResourceId;
    name: string;
    type: ClientType;
}>;
export declare type PODFrontendClient = PODBaseClient & Readonly<{
    type: ClientType.Frontend;
    redirectUris: string[];
    postLogoutRedirectUris: string[];
}>;
export declare type PODBackendClient = PODBaseClient & Readonly<{
    type: ClientType.Backend;
    redirectUris: string[];
    postLogoutRedirectUris: string[];
    publicKeys: PublicJWK[];
}>;
export declare type PODServiceClient = PODBaseClient & Readonly<{
    type: ClientType.Service;
    publicKeys: PublicJWK[];
}>;
export declare type PODClient = PODFrontendClient | PODBackendClient | PODServiceClient;
export declare enum ClientType {
    Frontend = "frontend",
    Backend = "backend",
    Service = "service"
}
declare class BaseClient implements Model {
    #private;
    readonly id: ClientId;
    readonly createdAt: Date;
    readonly creator: IdentityId;
    readonly appId: AppId;
    readonly name: string;
    readonly type: ClientType;
    constructor(client: HttpClient, pod: PODBaseClient);
    delete(): Promise<void>;
    isFrontend(): this is FrontendClient;
    isBackend(): this is BackendClient;
    isService(): this is ServiceClient;
}
export declare class FrontendClient extends BaseClient {
    readonly type = ClientType.Frontend;
    readonly redirectUris: string[];
    readonly postLogoutRedirectUris: string[];
    constructor(client: HttpClient, pod: PODFrontendClient);
}
declare type FrontendClientConfig = {
    type: ClientType.Frontend;
    redirectUris: string[];
    postLogoutRedirectUris: string[];
};
export declare class BackendClient extends BaseClient {
    readonly type = ClientType.Backend;
    readonly redirectUris: string[];
    readonly postLogoutRedirectUris: string[];
    readonly publicKeys: PublicJWK[];
    constructor(client: HttpClient, pod: PODBackendClient);
}
declare type BackendClientConfig = {
    type: ClientType.Backend;
    redirectUris: string[];
    postLogoutRedirectUris: string[];
    publicKeys: PublicJWK[];
};
export declare class ServiceClient extends BaseClient {
    readonly type = ClientType.Service;
    readonly publicKeys: PublicJWK[];
    constructor(client: HttpClient, pod: PODServiceClient);
}
declare type ServiceClientConfig = {
    type: ClientType.Service;
    publicKeys: PublicJWK[];
};
export declare type Client = FrontendClient | BackendClient | ServiceClient;
export declare namespace ClientImpl {
    function create(client: HttpClient, appId: AppId, params: ClientCreateParams): Promise<Client>;
    function get(client: HttpClient, appId: AppId, clientId: ClientId): Promise<Client>;
    function list(client: HttpClient, appId: AppId, filter?: ListClientsFilter & PageParams): Promise<Page<Client>>;
    function update(client: HttpClient, appId: AppId, clientId: ClientId, params: ClientUpdateParams): Promise<Client>;
    function delete_(client: HttpClient, appId: AppId, clientId: ClientId): Promise<void>;
}
declare type BaseClientCreateParams = WritableExcluding<BaseClient, 'creator' | 'appId'>;
export declare type FrontendClientCreateParams = BaseClientCreateParams & FrontendClientConfig;
export declare type BackendClientCreateParams = BaseClientCreateParams & BackendClientConfig;
export declare type ServiceClientCreateParams = BaseClientCreateParams & ServiceClientConfig;
export declare type ClientCreateParams = FrontendClientCreateParams | BackendClientCreateParams | ServiceClientCreateParams;
declare type BaseClientUpdateParams = BaseClientCreateParams;
export declare type FrontendClientUpdateParams = BaseClientUpdateParams & FrontendClientConfig;
export declare type BackendClientUpdateParams = BaseClientUpdateParams & BackendClientConfig;
export declare type ServiceClientUpdateParams = BaseClientUpdateParams & ServiceClientConfig;
export declare type ClientUpdateParams = FrontendClientUpdateParams | BackendClientUpdateParams | ServiceClientUpdateParams;
export declare type ListClientsFilter = Partial<{
    /** Only return clients created by the provided identity. */
    creator: IdentityId;
    /** Only return clients for the provided app. */
    appId: AppId;
}>;
export {};
//# sourceMappingURL=client.d.ts.map