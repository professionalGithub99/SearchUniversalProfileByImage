var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Database_client;
import { makePage } from './model.js';
export class Database {
    constructor(client, pod) {
        _Database_client.set(this, void 0);
        __classPrivateFieldSet(this, _Database_client, client, "f");
        this.id = pod.id;
        this.createdAt = new Date(pod.createdAt);
        this.creator = pod.creator;
        this.owner = pod.owner;
        this.name = pod.name;
    }
    async update(params) {
        Object.assign(this, await DatabaseImpl.update(__classPrivateFieldGet(this, _Database_client, "f"), this.id, params));
        return this;
    }
    async delete() {
        return DatabaseImpl.delete_(__classPrivateFieldGet(this, _Database_client, "f"), this.id);
    }
}
_Database_client = new WeakMap();
export var DatabaseImpl;
(function (DatabaseImpl) {
    async function get(client, id) {
        const podDatabase = await client.get(endpointForId(id));
        return new Database(client, podDatabase);
    }
    DatabaseImpl.get = get;
    async function create(client, params) {
        const podDatabase = await client.create(DATABASES_EP, params);
        return new Database(client, podDatabase);
    }
    DatabaseImpl.create = create;
    async function list(client, filter) {
        const podPage = await client.get(DATABASES_EP, filter);
        return makePage(Database, podPage, client);
    }
    DatabaseImpl.list = list;
    async function query(client, id, params) {
        return client.post(endpointForId(id), params);
    }
    DatabaseImpl.query = query;
    async function update(client, id, params) {
        const PODDatabase = await client.update(endpointForId(id), params);
        return new Database(client, PODDatabase);
    }
    DatabaseImpl.update = update;
    async function delete_(client, id) {
        return client.delete(endpointForId(id));
    }
    DatabaseImpl.delete_ = delete_;
})(DatabaseImpl || (DatabaseImpl = {}));
const DATABASES_EP = 'databases';
const endpointForId = (id) => `${DATABASES_EP}/${id}`;
//# sourceMappingURL=database.js.map