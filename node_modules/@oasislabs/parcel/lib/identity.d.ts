import type { Merge, Opaque, SetOptional } from 'type-fest';
import type { AppId } from './app.js';
import { Grant } from './grant.js';
import type { HttpClient } from './http.js';
import type { Model, Page, PageParams, PODModel, ResourceId, Writable } from './model.js';
import { Permission } from './permission.js';
import type { PermissionId } from './permission.js';
import type { IdentityTokenClaims, PublicJWK } from './token.js';
import type { EthAddr, TokenBalance, TokenId } from './tokenization.js';
export declare type IdentityId = Opaque<ResourceId, 'IdentityId' | 'AppId'> | 'escrow';
export declare type PODIdentity = Readonly<PODModel & {
    tokenVerifiers: IdentityTokenVerifier[];
}>;
export declare class Identity implements Model {
    #private;
    readonly id: IdentityId;
    readonly createdAt: Date;
    readonly tokenVerifiers: IdentityTokenVerifier[];
    constructor(client: HttpClient, pod: PODIdentity);
    update(params: IdentityUpdateParams): Promise<Identity>;
    delete(): Promise<void>;
    /** Links an Ethereum address to this Parcel identity.
     * `ethAddr` - the '0x' prefixed, hex-encoded Eth address (e.g., `web3.eth.accounts[0]`).
     * `proof` - (optional) the signature produced by web3's `personal_sign` over the string
     *           `parcel identity = <your identity id>`. If left unspecified, this library will
     *           attempt to make the signature using the global web3 provider.
     */
    linkEthereumAddress(ethAddr: EthAddr, proof?: string): Promise<LinkedEthAddr>;
    unlinkEthereumAddress(ethAddr: EthAddr): Promise<void>;
    listLinkedEthereumAddresses(filter?: PageParams): Promise<Page<LinkedEthAddr>>;
    /** Fetches permissions to which this identity has agreed.  */
    listGrantedPermissions(filter?: ListGrantedPermissionsFilter & PageParams): Promise<Page<Permission>>;
    grantPermission(id: PermissionId): Promise<GrantedPermission>;
    /** Gets a granted permission by id. Useful for checking if a permission has been granted. */
    getGrantedPermission(id: PermissionId): Promise<Permission>;
    revokePermission(id: PermissionId): Promise<void>;
    listTokens(filter?: PageParams): Promise<Page<TokenBalance>>;
    getTokenBalance(token: TokenId): Promise<TokenBalance>;
}
export declare namespace IdentityImpl {
    function create(client: HttpClient, params: IdentityCreateParams): Promise<Identity>;
    function current(client: HttpClient): Promise<Identity>;
    function get(client: HttpClient, id: IdentityId): Promise<Identity>;
    function update(client: HttpClient, id: IdentityId, params: IdentityUpdateParams): Promise<Identity>;
    function delete_(client: HttpClient, id: IdentityId): Promise<void>;
    function linkEthereumAddress(client: HttpClient, identity: IdentityId, ethAddr: string, proof?: string): Promise<LinkedEthAddr>;
    function listLinkedEthereumAddresses(client: HttpClient, identityId: IdentityId, filter?: PageParams): Promise<Page<LinkedEthAddr>>;
    function unlinkEthereumAddress(client: HttpClient, identity: IdentityId, ethAddr: string): Promise<void>;
    /** Grants permission to an app. */
    function grantPermission(client: HttpClient, identityId: IdentityId, permissionId: PermissionId): Promise<GrantedPermission>;
    function listGrantedPermissions(client: HttpClient, identityId: IdentityId, filter?: ListGrantedPermissionsFilter & PageParams): Promise<Page<Permission>>;
    function getGrantedPermission(client: HttpClient, identityId: IdentityId, permissionId: PermissionId): Promise<Permission>;
    function revokePermission(client: HttpClient, identityId: IdentityId, permissionId: PermissionId): Promise<void>;
    function listHeldTokens(client: HttpClient, identityId: IdentityId, filter?: PageParams): Promise<Page<TokenBalance>>;
    function getTokenBalance(client: HttpClient, identityId: IdentityId, tokenId: TokenId): Promise<TokenBalance>;
}
export declare type IdentityCreateParams = Merge<IdentityUpdateParams, {
    tokenVerifiers: IdentityTokenVerifierCreate[];
}>;
export declare type IdentityUpdateParams = Writable<Identity>;
export declare type IdentityTokenVerifier = IdentityTokenClaims & {
    publicKey: PublicJWK;
};
export declare type IdentityTokenVerifierCreate = SetOptional<IdentityTokenVerifier, 'sub' | 'iss'>;
export declare type ListGrantedPermissionsFilter = Partial<{
    /** Only return permissions granted to this app. */
    app: AppId;
}>;
/** The outcome of granting a permission to an app. */
export declare type GrantedPermission = {
    /** The actual grants created as a result of accepting the permission. */
    grants: Grant[];
};
export declare type LinkedEthAddr = {
    address: EthAddr;
    linkedAt: Date;
};
//# sourceMappingURL=identity.d.ts.map