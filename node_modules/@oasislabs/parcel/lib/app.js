var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _App_client;
import { IdentityImpl } from './identity.js';
import { makePage } from './model.js';
import { PermissionImpl } from './permission.js';
export class App {
    constructor(client, pod) {
        _App_client.set(this, void 0);
        __classPrivateFieldSet(this, _App_client, client, "f");
        this.acceptanceText = pod.acceptanceText;
        this.admins = pod.admins;
        this.allowUserUploads = pod.allowUserUploads;
        this.brandingColor = pod.brandingColor;
        this.category = pod.category;
        this.collaborators = pod.collaborators;
        this.createdAt = new Date(pod.createdAt);
        this.owner = pod.owner;
        this.extendedDescription = pod.extendedDescription;
        this.homepageUrl = pod.homepageUrl;
        this.id = pod.id;
        this.invites = pod.invites;
        this.invitationText = pod.invitationText;
        this.inviteOnly = pod.inviteOnly;
        this.name = pod.name;
        this.organization = pod.organization;
        this.participants = pod.participants;
        this.privacyPolicy = pod.privacyPolicy;
        this.published = pod.published;
        this.rejectionText = pod.rejectionText;
        this.shortDescription = pod.shortDescription;
        this.termsAndConditions = pod.termsAndConditions;
        this.logoUrl = pod.logoUrl;
    }
    async getIdentity() {
        return IdentityImpl.get(__classPrivateFieldGet(this, _App_client, "f"), this.id);
    }
    async update(params) {
        Object.assign(this, await AppImpl.update(__classPrivateFieldGet(this, _App_client, "f"), this.id, params));
        return this;
    }
    async updateIdentity(params) {
        return IdentityImpl.update(__classPrivateFieldGet(this, _App_client, "f"), this.id, params);
    }
    async delete() {
        return AppImpl.delete_(__classPrivateFieldGet(this, _App_client, "f"), this.id);
    }
    /**
     * Creates a new permission that this app will request from users. The new permission
     * will be added to `this.permissions`.
     */
    async createPermission(params) {
        return PermissionImpl.create(__classPrivateFieldGet(this, _App_client, "f"), this.id, params);
    }
    /**
     * Returns the permissions associated with this app.
     */
    async listPermissions(filter) {
        return PermissionImpl.list(__classPrivateFieldGet(this, _App_client, "f"), this.id, filter);
    }
    /**
     * Deletes a permission from this app, revoking any access made by granting permission.
     * will be removed from `this.permissions`.
     */
    async deletePermission(permissionId) {
        return PermissionImpl.delete_(__classPrivateFieldGet(this, _App_client, "f"), this.id, permissionId);
    }
}
_App_client = new WeakMap();
export var AppImpl;
(function (AppImpl) {
    async function create(client, params) {
        const podApp = await client.create(APPS_EP, params);
        return new App(client, podApp);
    }
    AppImpl.create = create;
    async function get(client, id) {
        const podApp = await client.get(endpointForId(id));
        return new App(client, podApp);
    }
    AppImpl.get = get;
    async function list(client, filter) {
        const podPage = await client.get(APPS_EP, filter);
        return makePage(App, podPage, client);
    }
    AppImpl.list = list;
    async function update(client, id, params) {
        const podApp = await client.update(endpointForId(id), params);
        return new App(client, podApp);
    }
    AppImpl.update = update;
    async function delete_(client, id) {
        return client.delete(endpointForId(id));
    }
    AppImpl.delete_ = delete_;
})(AppImpl || (AppImpl = {}));
export const APPS_EP = 'apps';
const endpointForId = (id) => `${APPS_EP}/${id}`;
export { endpointForId as endpointForApp };
//# sourceMappingURL=app.js.map