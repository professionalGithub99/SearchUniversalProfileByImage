var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Permission_client;
import { endpointForApp } from './app.js';
import { makePage } from './model.js';
export class Permission {
    constructor(client, pod) {
        _Permission_client.set(this, void 0);
        __classPrivateFieldSet(this, _Permission_client, client, "f");
        this.id = pod.id;
        this.appId = pod.appId;
        this.createdAt = new Date(pod.createdAt);
        this.grants = pod.grants;
        this.name = pod.name;
        this.description = pod.description;
        this.allowText = pod.allowText;
        this.denyText = pod.denyText;
    }
}
_Permission_client = new WeakMap();
export var PermissionImpl;
(function (PermissionImpl) {
    async function create(client, appId, params) {
        const podPermission = await client.create(endpointForCollection(appId), params);
        return new Permission(client, podPermission);
    }
    PermissionImpl.create = create;
    async function list(client, appId, filter) {
        const podPage = await client.get(endpointForCollection(appId), filter);
        return makePage(Permission, podPage, client);
    }
    PermissionImpl.list = list;
    async function get(client, appId, permissionId) {
        const podPermission = await client.get(endpointForId(appId, permissionId));
        return new Permission(client, podPermission);
    }
    PermissionImpl.get = get;
    async function delete_(client, appId, permissionId) {
        return client.delete(endpointForId(appId, permissionId));
    }
    PermissionImpl.delete_ = delete_;
})(PermissionImpl || (PermissionImpl = {}));
const endpointForCollection = (appId) => `${endpointForApp(appId)}/permissions`;
const endpointForId = (appId, permissionId) => `${endpointForCollection(appId)}/${permissionId}`;
//# sourceMappingURL=permission.js.map