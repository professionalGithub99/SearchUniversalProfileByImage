/**
 * See main class {@link Parcel}
 *
 * @category Main
 * @module Parcel
 */
import type { App, AppCreateParams, AppId, AppUpdateParams, ListAppsFilter } from './app.js';
import type { AssetId, EscrowedAsset, EscrowedAssetSearchParams, AccessContext } from './asset.js';
import type { BackendClientCreateParams, BackendClientUpdateParams, Client, ClientCreateParams, ClientId, ClientUpdateParams, FrontendClientCreateParams, FrontendClientUpdateParams, ListClientsFilter, ServiceClientCreateParams, ServiceClientUpdateParams } from './client.js';
import { BackendClient, ClientType, FrontendClient, ServiceClient } from './client.js';
import type { Job, JobId, JobSpec, JobStatus, JobStatusReport } from './compute.js';
import { InputDocumentSpec, JobPhase, ListJobsFilter, OutputDocument, OutputDocumentSpec } from './compute.js';
import type { Condition } from './condition.js';
import type { Database, DatabaseCreateParams, DatabaseId, DatabaseUpdateParams, ListDatabasesFilter, Query, Row } from './database.js';
import type { AccessEvent, Document, DocumentId, DocumentSearchParams, DocumentUpdateParams, DocumentUploadParams, ListAccessLogFilter, Storable, Upload } from './document.js';
import type { Grant, GrantCreateParams, GrantId } from './grant.js';
import { Capabilities, ListGrantsFilter } from './grant.js';
import type { Config as ClientConfig, Download } from './http.js';
import { ApiError } from './http.js';
import type { GrantedPermission, Identity, IdentityCreateParams, IdentityId, IdentityUpdateParams } from './identity.js';
import type { GetUsageFilter, MeteringQuota, MeteringReport, QuotaUpdateParams } from './meter.js';
import type { Page, PageParams } from './model.js';
import type { Permission, PermissionCreateParams, PermissionId } from './permission.js';
import type { ClientCredentials, PrivateJWK, PublicJWK, RefreshingTokenProviderParams, RenewingTokenProviderParams, Scope, SelfIssuedTokenProviderParams, TokenSource } from './token.js';
import { PARCEL_RUNTIME_AUD } from './token.js';
import type { EthAddr, EthBridge, EthBridgeGasParams, EthBridgeType, Token, TokenBalance, TokenCreateParams, TokenGrantSpec, TokenId, TokenSearchParams, TokenizationReceipt, TransferReceipt, TransferReceiptId } from './tokenization.js';
export { AccessContext, AccessEvent, ApiError, App, AppCreateParams, AppId, AppUpdateParams, AssetId, BackendClient, BackendClientCreateParams, BackendClientUpdateParams, Capabilities, Client, ClientCreateParams, ClientCredentials, ClientId, ClientType, Condition, Database, DatabaseCreateParams, DatabaseId, DatabaseUpdateParams, Document, DocumentId, DocumentUpdateParams, DocumentUploadParams, Download, EscrowedAsset, EscrowedAssetSearchParams, EthAddr, EthBridge, EthBridgeGasParams, EthBridgeType, FrontendClient, FrontendClientCreateParams, FrontendClientUpdateParams, GetUsageFilter, Grant, GrantCreateParams, GrantId, GrantedPermission, Identity, IdentityCreateParams, IdentityId, IdentityUpdateParams, InputDocumentSpec, Job, JobId, JobPhase, JobSpec, JobStatus, JobStatusReport, MeteringQuota, MeteringReport, OutputDocument, OutputDocumentSpec, PARCEL_RUNTIME_AUD, Page, PageParams, Permission, PermissionCreateParams, PermissionId, PrivateJWK, PublicJWK, QuotaUpdateParams, RefreshingTokenProviderParams, RenewingTokenProviderParams, Scope, SelfIssuedTokenProviderParams, ServiceClient, ServiceClientCreateParams, ServiceClientUpdateParams, Storable, Token, TokenBalance, TokenCreateParams, TokenGrantSpec, TokenId, TokenSearchParams, TokenSource, TokenizationReceipt, TransferReceipt, TransferReceiptId, };
/**
 * Example:
 * ```ts
 * import Parcel from '@oasislabs/parcel';
 * const parcel = new Parcel({
 *   clientId: serviceClientId,
 *   privateKey: serviceClientPrivateKey,
 * });
 * console.log(await parcel.searchDocuments());
 * ```
 *
 * @category Main
 */
export declare class Parcel {
    private currentIdentity?;
    private readonly client;
    constructor(tokenSource: TokenSource, config?: Config);
    get apiUrl(): string;
    createIdentity(params: IdentityCreateParams): Promise<Identity>;
    getCurrentIdentity(): Promise<Identity>;
    createDatabase(params: DatabaseCreateParams): Promise<Database>;
    getDatabase(id: DatabaseId): Promise<Database>;
    updateDatabase(id: DatabaseId, params: DatabaseUpdateParams): Promise<Database>;
    queryDatabase(id: DatabaseId, params: Query): Promise<Row[]>;
    listDatabases(params: ListDatabasesFilter & PageParams): Promise<Page<Database>>;
    deleteDatabase(id: DatabaseId): Promise<void>;
    uploadDocument(data: Storable, params: DocumentUploadParams | undefined | null): Upload;
    getDocument(id: DocumentId): Promise<Document>;
    searchDocuments(params?: DocumentSearchParams & PageParams): Promise<Page<Document>>;
    downloadDocument(id: DocumentId): Download;
    getDocumentHistory(id: DocumentId, filter?: ListAccessLogFilter & PageParams): Promise<Page<AccessEvent>>;
    updateDocument(id: DocumentId, update: DocumentUpdateParams): Promise<Document>;
    deleteDocument(id: DocumentId): Promise<void>;
    createApp(params: AppCreateParams): Promise<App>;
    getApp(id: AppId): Promise<App>;
    listApps(filter?: ListAppsFilter & PageParams): Promise<Page<App>>;
    updateApp(id: AppId, update: AppUpdateParams): Promise<App>;
    deleteApp(id: AppId): Promise<void>;
    createPermission(appId: AppId, params: PermissionCreateParams): Promise<Permission>;
    listPermissions(appId: AppId, filter?: PageParams): Promise<Page<Permission>>;
    deletePermission(appId: AppId, permissionId: PermissionId): Promise<void>;
    createClient(appId: AppId, params: ClientCreateParams): Promise<Client>;
    getClient(appId: AppId, clientId: ClientId): Promise<Client>;
    listClients(appId: AppId, filter?: ListClientsFilter & PageParams): Promise<Page<Client>>;
    updateClient(appId: AppId, clientId: ClientId, update: ClientUpdateParams): Promise<Client>;
    deleteClient(appId: AppId, clientId: ClientId): Promise<void>;
    createGrant(params: GrantCreateParams): Promise<Grant>;
    getGrant(id: GrantId): Promise<Grant>;
    listGrants(filter?: ListGrantsFilter & PageParams): Promise<Page<Grant>>;
    deleteGrant(id: GrantId): Promise<void>;
    /**
     * Enqueues a new job.
     * @param spec Specification for the job to enqueue.
     * @result Job The new job, including a newly-assigned ID.
     */
    submitJob(spec: JobSpec): Promise<Job>;
    /**
     * Lists all known jobs visible to the current user.
     * @param filter Controls pagination.
     * @result Job Lists known jobs. Includes recently completed jobs.
     */
    listJobs(filter?: ListJobsFilter & PageParams): Promise<Page<Job>>;
    /**
     * Returns the full description of a known job, including its status.
     */
    getJob(jobId: JobId): Promise<Job>;
    /**
     * Returns the status of the job. This method is faster than `getJob()` and throws if the
     * job status is unknown. This makes it well suited for status polling.
     */
    getJobStatus(jobId: JobId): Promise<JobStatusReport>;
    /**
     * Schedules the job for eventual termination/deletion. The job will be terminated at some point in the future on a best-effort basis.
     * It is not an error to request to terminate an already-terminated or non-existing job.
     * @param jobId The unique identifier of the job.
     */
    terminateJob(jobId: JobId): Promise<void>;
    /**
     * Gets a metering report for your API usage.
     * @param filter Controls API usage window.
     */
    getUsage(filter?: GetUsageFilter): Promise<MeteringReport>;
    /**
     * Gets your monthly API usage quota limits.
     */
    getQuota(): Promise<MeteringQuota>;
    /**
     * Updates your monthly API usage quota limits.
     * @param params Specifies monthly quota limits to enforce until you change them again.
     */
    setQuota(params: QuotaUpdateParams): Promise<MeteringQuota>;
    /** Returns the amount of the token held by the identity. */
    getTokenBalance(identityId: IdentityId, tokenId: TokenId): Promise<TokenBalance>;
    /** Mints a new token. */
    mintToken(params: TokenCreateParams): Promise<Token>;
    /** Returns information about a token. */
    getToken(tokenId: TokenId): Promise<Token>;
    searchTokens(filter?: TokenSearchParams & PageParams): Promise<Page<Token>>;
    /** Returns information about an asset held by the escrow identity. */
    searchEscrowedAssets(filter?: EscrowedAssetSearchParams & PageParams): Promise<Page<EscrowedAsset>>;
    /** Returns information about an asset held by the escrow identity. */
    getEscrowedAsset(assetId: AssetId): Promise<EscrowedAsset>;
    transferToken(tokenId: TokenId, amount: number, recipient: IdentityId): Promise<TransferReceipt>;
    getTransferReceipt(recieptId: TransferReceiptId): Promise<TransferReceipt>;
}
export default Parcel;
export declare type Config = ClientConfig;
//# sourceMappingURL=index.d.ts.map