import type { Except, Opaque } from 'type-fest';
import type { HttpClient } from './http.js';
import type { IdentityId } from './identity.js';
import type { JsonSerializable, Model, Page, PageParams, PODModel, ResourceId } from './model.js';
export declare type DatabaseId = Opaque<ResourceId, 'DatabaseId'>;
export declare type PODDatabase = Readonly<PODModel & {
    creator: ResourceId;
    owner: ResourceId;
    name: string;
}>;
export declare class Database implements Model {
    #private;
    readonly id: DatabaseId;
    readonly createdAt: Date;
    readonly creator: IdentityId;
    readonly owner: IdentityId;
    readonly name: string;
    constructor(client: HttpClient, pod: PODDatabase);
    update(params: DatabaseUpdateParams): Promise<Database>;
    delete(): Promise<void>;
}
export declare namespace DatabaseImpl {
    function get(client: HttpClient, id: DatabaseId): Promise<Database>;
    function create(client: HttpClient, params: DatabaseCreateParams): Promise<Database>;
    function list(client: HttpClient, filter?: ListDatabasesFilter & PageParams): Promise<Page<Database>>;
    function query(client: HttpClient, id: DatabaseId, params: Query): Promise<Row[]>;
    function update(client: HttpClient, id: DatabaseId, params: DatabaseUpdateParams): Promise<Database>;
    function delete_(client: HttpClient, id: DatabaseId): Promise<void>;
}
export declare type ListDatabasesFilter = Partial<{
    /** Only return databases from the provided owner. */
    owner?: IdentityId;
    /** Only return databases matching the provided name. */
    name?: string;
}>;
export declare type Query = {
    sql: string;
    params: Record<string, JsonSerializable>;
};
export declare type Row = JsonSerializable;
export declare type DatabaseUpdateParams = {
    name?: string;
    owner?: IdentityId;
};
export declare type DatabaseCreateParams = Except<DatabaseUpdateParams, 'owner'>;
//# sourceMappingURL=database.d.ts.map