import type { Opaque } from 'type-fest';
import type { Condition } from './condition.js';
import type { HttpClient } from './http.js';
import type { IdentityId } from './identity.js';
import type { Model, Page, PageParams, PODModel, ResourceId } from './model.js';
import type { PermissionId } from './permission.js';
export declare type GrantId = Opaque<ResourceId, 'GrantId'>;
export declare type PODGrant = Readonly<PODModel & {
    granter: ResourceId;
    grantee?: ResourceId;
    permission?: ResourceId;
    condition?: Condition;
    capabilities: string;
    delegating?: ResourceId;
}>;
export declare type GrantCreateParams = {
    /**
     * The singular Identity to which permission is given, or everyone;
     */
    grantee: IdentityId | 'everyone';
    /** The condition that must be matched to receive access to one or more Assets - Documents and Databases. */
    condition?: Condition | null;
    /** The capabilities attached to this grant. The default is `read`. */
    capabilities?: Capabilities | string;
    /**
     * The grant to extend by delegation. If you are the delegating grant's `grantee` is you,
     * and it has the `extend` capability, then this grant will have the same `granter` as
     * the delegating grant.
     */
    delegating?: GrantId;
};
export declare class Grant implements Model {
    #private;
    readonly id: GrantId;
    readonly createdAt: Date;
    /** The Identity from which permission is given. */
    readonly granter: IdentityId;
    /**
     * The Identity to which permission is given or everyone,
     */
    readonly grantee: IdentityId | 'everyone';
    /** The condition that describes Assets - Documents and Databases to be shared. */
    readonly condition?: Condition;
    /** The permission that created this Grant, if any. */
    readonly permission?: PermissionId;
    /** The actions permissible to the grantee on targets selected by the conditions. */
    readonly capabilities?: Capabilities;
    /** The grant that this grant extends by delegation. */
    readonly delegating?: GrantId;
    constructor(client: HttpClient, pod: PODGrant);
    delete(): Promise<void>;
}
export declare namespace GrantImpl {
    function create(client: HttpClient, params: GrantCreateParams): Promise<Grant>;
    function get(client: HttpClient, id: GrantId): Promise<Grant>;
    function list(client: HttpClient, filter?: ListGrantsFilter & PageParams): Promise<Page<Grant>>;
    function delete_(client: HttpClient, id: GrantId): Promise<void>;
}
export declare type ListGrantsFilter = {
    /** Only return grants from granter. */
    granter?: IdentityId;
    /** Only return grants for the provided app. */
    grantee?: IdentityId;
};
/**
 * `Capabilities` is a collection of bit flags.
 * To test if a capability is set, you can do something like
 * ```
 * const requiredCaps = (Capabilities.Read | Capabilities.Extend);
 * caps & requiredCaps === requiredCaps;
 * ```
 */
export declare enum Capabilities {
    None = 0,
    /** The ability to read/view the target. */
    Read = 1,
    /** The ability to delegate this grant's capabilities to someone else. */
    Extend = 4
}
export declare function parseCaps(strCaps?: string): Capabilities;
export declare function stringifyCaps(caps?: Capabilities): string;
//# sourceMappingURL=grant.d.ts.map