var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _MeteringReport_client, _MeteringQuota_client;
/**
 * A metering report of your API usage.
 */
export class MeteringReport {
    constructor(client, pod) {
        _MeteringReport_client.set(this, void 0);
        __classPrivateFieldSet(this, _MeteringReport_client, client, "f");
        this.createCount = pod.createCount;
        this.readCount = pod.readCount;
        this.writeCount = pod.writeCount;
        this.deleteCount = pod.deleteCount;
        this.uploadCount = pod.uploadCount;
        this.downloadCount = pod.downloadCount;
        this.uploadSizeBytes = pod.uploadSizeBytes;
        this.downloadSizeBytes = pod.downloadSizeBytes;
        this.computeMsec = pod.computeMsec;
    }
}
_MeteringReport_client = new WeakMap();
/**
 * Your monthly quota for API usage.
 */
export class MeteringQuota {
    constructor(client, pod) {
        _MeteringQuota_client.set(this, void 0);
        __classPrivateFieldSet(this, _MeteringQuota_client, client, "f");
        this.apiCallsLimit = pod.apiCallsLimit;
        this.accessedBytesLimit = pod.accessedBytesLimit;
        this.computeMsecLimit = pod.computeMsecLimit;
    }
}
_MeteringQuota_client = new WeakMap();
const USAGE_EP = 'usage';
const QUOTA_EP = 'quota';
export var MeterImpl;
(function (MeterImpl) {
    async function getUsage(client, filter) {
        const pod = await client.get(USAGE_EP, filter);
        return new MeteringReport(client, pod);
    }
    MeterImpl.getUsage = getUsage;
    async function getQuota(client) {
        const pod = await client.get(QUOTA_EP);
        return new MeteringQuota(client, pod);
    }
    MeterImpl.getQuota = getQuota;
    async function setQuota(client, params) {
        const pod = await client.put(QUOTA_EP, params);
        return new MeteringQuota(client, pod);
    }
    MeterImpl.setQuota = setQuota;
})(MeterImpl || (MeterImpl = {}));
//# sourceMappingURL=meter.js.map