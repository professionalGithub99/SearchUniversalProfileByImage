import type { ConditionalExcept, Except } from 'type-fest';
import type { HttpClient } from './http.js';
export declare type ResourceId = string;
export declare type JsonSerializable = Date | string | number | boolean | null | undefined | JsonSerializable[] | {
    [key in string]: JsonSerializable;
};
export interface PODModel {
    /** An undifferentiated model identifier. */
    id: ResourceId;
    /** The number of seconds since the Unix epoch when this model was created */
    createdAt: string;
}
export interface Model {
    /** The model's unique ID. */
    readonly id: ResourceId;
    /** The number of seconds since the Unix epoch when this model was created */
    readonly createdAt: Date;
}
export declare type Writable<T extends Model> = WritableExcluding<T, never>;
export declare type WritableExcluding<T extends Model, ReadOnly extends keyof T> = ConditionalExcept<Except<T, 'id' | 'createdAt' | ReadOnly>, (...args: any[]) => any>;
export declare type Page<T> = {
    results: T[];
    nextPageToken: string;
};
export declare type PageParams = Partial<{
    pageSize: number;
    pageToken: string;
}>;
export declare function makePage<Pod extends PODModel, M extends Model>(ModelTy: {
    new (client: HttpClient, pod: Pod): M;
}, podPage: Page<Pod>, client: HttpClient): Page<M>;
//# sourceMappingURL=model.d.ts.map