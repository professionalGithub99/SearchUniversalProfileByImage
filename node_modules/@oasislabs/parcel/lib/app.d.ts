import type { Except, Opaque } from 'type-fest';
import type { HttpClient } from './http.js';
import type { IdentityId, IdentityCreateParams, IdentityUpdateParams } from './identity.js';
import { Identity } from './identity.js';
import type { Model, Page, PageParams, PODModel, ResourceId, WritableExcluding } from './model.js';
import { Permission } from './permission.js';
import type { PermissionCreateParams, PermissionId } from './permission.js';
export declare type AppId = Opaque<ResourceId, 'AppId'>;
export declare type PODApp = Readonly<PODModel & {
    acceptanceText?: string;
    admins: ResourceId[];
    allowUserUploads: boolean;
    brandingColor?: string;
    category?: string;
    collaborators: ResourceId[];
    extendedDescription?: string;
    homepageUrl: string;
    invitationText?: string;
    inviteOnly: boolean;
    invites?: ResourceId[];
    logoUrl: string;
    name: string;
    organization: string;
    owner: ResourceId;
    participants: ResourceId[];
    published: boolean;
    rejectionText?: string;
    shortDescription: string;
    termsAndConditions: string;
    privacyPolicy: string;
}>;
export declare class App implements Model {
    #private;
    readonly id: AppId;
    readonly createdAt: Date;
    /** The Identity that created the app. */
    readonly owner: IdentityId;
    readonly admins: IdentityId[];
    /** Identities that can view participation of the app and modify un-privileged fields. */
    readonly collaborators: IdentityId[];
    /** Whether this app has been published. Permissions may not be modified after publishing, */
    readonly published: boolean;
    /** If `true`, only invited Identities may participate in the app. */
    readonly inviteOnly: boolean;
    /** Identities invited to participate in this app. */
    readonly invites: IdentityId[];
    /** The set of identities that are currently authorizing this app. */
    readonly participants: IdentityId[];
    /** Allow non-admin users to upload documents. */
    readonly allowUserUploads: boolean;
    readonly name: string;
    /** The name of the app publisher's organization. */
    readonly organization: string;
    readonly shortDescription: string;
    /** The app publisher's homepage URL. */
    readonly homepageUrl: string;
    /** A URL pointing to (or containing) the app's logo. */
    readonly logoUrl: string;
    /** The privacy policy presented to the user when joining the app. */
    readonly privacyPolicy: string;
    /** The terms and conditions presented to the user when joining the app. */
    readonly termsAndConditions: string;
    /** Text shown to the user when viewing the app's invite page. */
    readonly invitationText?: string;
    /** Text shown to the user after accepting the app's invitation. */
    readonly acceptanceText?: string;
    /** Text shown to the user after rejecting the app's invitation. */
    readonly rejectionText?: string;
    readonly extendedDescription?: string;
    /** The app's branding color in RGB hex format (e.g. `#ff4212`). */
    readonly brandingColor?: string;
    /**
     * Text describing the category of the app (e.g., health, finance) that can
     * be used to search for the app.
     */
    readonly category?: string;
    constructor(client: HttpClient, pod: PODApp);
    getIdentity(): Promise<Identity>;
    update(params: AppUpdateParams): Promise<App>;
    updateIdentity(params: IdentityUpdateParams): Promise<Identity>;
    delete(): Promise<void>;
    /**
     * Creates a new permission that this app will request from users. The new permission
     * will be added to `this.permissions`.
     */
    createPermission(params: PermissionCreateParams): Promise<Permission>;
    /**
     * Returns the permissions associated with this app.
     */
    listPermissions(filter?: PageParams): Promise<Page<Permission>>;
    /**
     * Deletes a permission from this app, revoking any access made by granting permission.
     * will be removed from `this.permissions`.
     */
    deletePermission(permissionId: PermissionId): Promise<void>;
}
export declare namespace AppImpl {
    function create(client: HttpClient, params: AppCreateParams): Promise<App>;
    function get(client: HttpClient, id: AppId): Promise<App>;
    function list(client: HttpClient, filter?: ListAppsFilter & PageParams): Promise<Page<App>>;
    function update(client: HttpClient, id: AppId, params: AppUpdateParams): Promise<App>;
    function delete_(client: HttpClient, id: AppId): Promise<void>;
}
export declare const APPS_EP = "apps";
declare const endpointForId: (id: AppId) => string;
export { endpointForId as endpointForApp };
export declare type AppCreateParams = Except<AppUpdateParams, 'owner'> & {
    /** The credentials used to authorize clients acting as this app. */
    identity: IdentityCreateParams;
};
export declare type AppUpdateParams = WritableExcluding<App, 'participants'>;
export declare type ListAppsFilter = Partial<{
    /** Only return Apps owned by the provided Identity. */
    owner: IdentityId;
    /** Only return Apps for which the requester has the specified participation status. */
    participation: AppParticipation;
}>;
export declare type AppParticipation = 'invited' | 'joined';
//# sourceMappingURL=app.d.ts.map