import { ethers, Signer, BigNumber, BigNumberish, PopulatedTransaction, BaseContract, ContractTransaction, Overrides, PayableOverrides, CallOverrides } from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface UniversalProfileInitInterface extends ethers.utils.Interface {
    functions: {
        "allDataKeys()": FunctionFragment;
        "dataKeys(uint256)": FunctionFragment;
        "execute(uint256,address,uint256,bytes)": FunctionFragment;
        "getData(bytes32[])": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "isValidSignature(bytes32,bytes)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setData(bytes32[],bytes[])": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "universalReceiver(bytes32,bytes)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "allDataKeys", values?: undefined): string;
    encodeFunctionData(functionFragment: "dataKeys", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "execute", values: [BigNumberish, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getData", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "initialize", values: [string]): string;
    encodeFunctionData(functionFragment: "isValidSignature", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setData", values: [BytesLike[], BytesLike[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "universalReceiver", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "allDataKeys", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dataKeys", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "universalReceiver", data: BytesLike): Result;
    events: {
        "ContractCreated(uint256,address,uint256)": EventFragment;
        "DataChanged(bytes32,bytes)": EventFragment;
        "Executed(uint256,address,uint256,bytes)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "UniversalReceiver(address,bytes32,bytes,bytes)": EventFragment;
        "ValueReceived(address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DataChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UniversalReceiver"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ValueReceived"): EventFragment;
}
export declare type ContractCreatedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber
], {
    _operation: BigNumber;
    _contractAddress: string;
    _value: BigNumber;
}>;
export declare type ContractCreatedEventFilter = TypedEventFilter<ContractCreatedEvent>;
export declare type DataChangedEvent = TypedEvent<[
    string,
    string
], {
    key: string;
    value: string;
}>;
export declare type DataChangedEventFilter = TypedEventFilter<DataChangedEvent>;
export declare type ExecutedEvent = TypedEvent<[
    BigNumber,
    string,
    BigNumber,
    string
], {
    _operation: BigNumber;
    _to: string;
    _value: BigNumber;
    _data: string;
}>;
export declare type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export declare type UniversalReceiverEvent = TypedEvent<[
    string,
    string,
    string,
    string
], {
    from: string;
    typeId: string;
    returnedValue: string;
    receivedData: string;
}>;
export declare type UniversalReceiverEventFilter = TypedEventFilter<UniversalReceiverEvent>;
export declare type ValueReceivedEvent = TypedEvent<[
    string,
    BigNumber
], {
    sender: string;
    value: BigNumber;
}>;
export declare type ValueReceivedEventFilter = TypedEventFilter<ValueReceivedEvent>;
export interface UniversalProfileInit extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: UniversalProfileInitInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allDataKeys(overrides?: CallOverrides): Promise<[string[]]>;
        dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        execute(_operation: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<[string[]] & {
            values: string[];
        }>;
        initialize(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            magicValue: string;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setData(_keys: BytesLike[], _values: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        universalReceiver(_typeId: BytesLike, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    allDataKeys(overrides?: CallOverrides): Promise<string[]>;
    dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    execute(_operation: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
    initialize(_newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setData(_keys: BytesLike[], _values: BytesLike[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    universalReceiver(_typeId: BytesLike, _data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        allDataKeys(overrides?: CallOverrides): Promise<string[]>;
        dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        execute(_operation: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<string>;
        getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        initialize(_newOwner: string, overrides?: CallOverrides): Promise<void>;
        isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setData(_keys: BytesLike[], _values: BytesLike[], overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        universalReceiver(_typeId: BytesLike, _data: BytesLike, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ContractCreated(uint256,address,uint256)"(_operation?: BigNumberish | null, _contractAddress?: string | null, _value?: BigNumberish | null): ContractCreatedEventFilter;
        ContractCreated(_operation?: BigNumberish | null, _contractAddress?: string | null, _value?: BigNumberish | null): ContractCreatedEventFilter;
        "DataChanged(bytes32,bytes)"(key?: BytesLike | null, value?: null): DataChangedEventFilter;
        DataChanged(key?: BytesLike | null, value?: null): DataChangedEventFilter;
        "Executed(uint256,address,uint256,bytes)"(_operation?: BigNumberish | null, _to?: string | null, _value?: BigNumberish | null, _data?: null): ExecutedEventFilter;
        Executed(_operation?: BigNumberish | null, _to?: string | null, _value?: BigNumberish | null, _data?: null): ExecutedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "UniversalReceiver(address,bytes32,bytes,bytes)"(from?: string | null, typeId?: BytesLike | null, returnedValue?: BytesLike | null, receivedData?: null): UniversalReceiverEventFilter;
        UniversalReceiver(from?: string | null, typeId?: BytesLike | null, returnedValue?: BytesLike | null, receivedData?: null): UniversalReceiverEventFilter;
        "ValueReceived(address,uint256)"(sender?: string | null, value?: BigNumberish | null): ValueReceivedEventFilter;
        ValueReceived(sender?: string | null, value?: BigNumberish | null): ValueReceivedEventFilter;
    };
    estimateGas: {
        allDataKeys(overrides?: CallOverrides): Promise<BigNumber>;
        dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        execute(_operation: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setData(_keys: BytesLike[], _values: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        universalReceiver(_typeId: BytesLike, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        allDataKeys(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dataKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute(_operation: BigNumberish, _to: string, _value: BigNumberish, _data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setData(_keys: BytesLike[], _values: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        universalReceiver(_typeId: BytesLike, _data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
