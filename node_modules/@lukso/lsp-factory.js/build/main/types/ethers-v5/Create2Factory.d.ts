import { ethers, Signer, BigNumber, PopulatedTransaction, BaseContract, ContractTransaction, PayableOverrides, CallOverrides } from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface Create2FactoryInterface extends ethers.utils.Interface {
    functions: {
        "computeAddress(bytes32,bytes32)": FunctionFragment;
        "deploy(bytes32,bytes)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "computeAddress", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "deploy", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "computeAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
    events: {
        "ContractCreated(address,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
}
export declare type ContractCreatedEvent = TypedEvent<[
    string,
    string
], {
    addr: string;
    salt: string;
}>;
export declare type ContractCreatedEventFilter = TypedEventFilter<ContractCreatedEvent>;
export interface Create2Factory extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: Create2FactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "computeAddress(bytes32,bytes32)"(salt: BytesLike, bytecodeHash: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        "computeAddress(bytes32,bytes32,address)"(salt: BytesLike, bytecodeHash: BytesLike, deployer: string, overrides?: CallOverrides): Promise<[string]>;
        deploy(salt: BytesLike, bytecode: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    "computeAddress(bytes32,bytes32)"(salt: BytesLike, bytecodeHash: BytesLike, overrides?: CallOverrides): Promise<string>;
    "computeAddress(bytes32,bytes32,address)"(salt: BytesLike, bytecodeHash: BytesLike, deployer: string, overrides?: CallOverrides): Promise<string>;
    deploy(salt: BytesLike, bytecode: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        "computeAddress(bytes32,bytes32)"(salt: BytesLike, bytecodeHash: BytesLike, overrides?: CallOverrides): Promise<string>;
        "computeAddress(bytes32,bytes32,address)"(salt: BytesLike, bytecodeHash: BytesLike, deployer: string, overrides?: CallOverrides): Promise<string>;
        deploy(salt: BytesLike, bytecode: BytesLike, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ContractCreated(address,bytes32)"(addr?: null, salt?: null): ContractCreatedEventFilter;
        ContractCreated(addr?: null, salt?: null): ContractCreatedEventFilter;
    };
    estimateGas: {
        "computeAddress(bytes32,bytes32)"(salt: BytesLike, bytecodeHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "computeAddress(bytes32,bytes32,address)"(salt: BytesLike, bytecodeHash: BytesLike, deployer: string, overrides?: CallOverrides): Promise<BigNumber>;
        deploy(salt: BytesLike, bytecode: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        "computeAddress(bytes32,bytes32)"(salt: BytesLike, bytecodeHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "computeAddress(bytes32,bytes32,address)"(salt: BytesLike, bytecodeHash: BytesLike, deployer: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deploy(salt: BytesLike, bytecode: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
