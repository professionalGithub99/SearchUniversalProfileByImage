import { ethers, Signer, BigNumber, BigNumberish, PopulatedTransaction, BaseContract, ContractTransaction, Overrides, CallOverrides } from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface LSP7CappedSupplyInterface extends ethers.utils.Interface {
    functions: {
        "authorizeOperator(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "decimals()": FunctionFragment;
        "getData(bytes32[])": FunctionFragment;
        "isOperatorFor(address,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "revokeOperator(address)": FunctionFragment;
        "setData(bytes32[],bytes[])": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "tokenSupplyCap()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,address,uint256,bool,bytes)": FunctionFragment;
        "transferBatch(address[],address[],uint256[],bool,bytes[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "authorizeOperator", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "getData", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "isOperatorFor", values: [string, string]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "revokeOperator", values: [string]): string;
    encodeFunctionData(functionFragment: "setData", values: [BytesLike[], BytesLike[]]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "tokenSupplyCap", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [string, string, BigNumberish, boolean, BytesLike]): string;
    encodeFunctionData(functionFragment: "transferBatch", values: [string[], string[], BigNumberish[], boolean, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    decodeFunctionResult(functionFragment: "authorizeOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOperatorFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenSupplyCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferBatch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "AuthorizedOperator(address,address,uint256)": EventFragment;
        "DataChanged(bytes32,bytes)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "RevokedOperator(address,address)": EventFragment;
        "Transfer(address,address,address,uint256,bool,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DataChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}
export declare type AuthorizedOperatorEvent = TypedEvent<[
    string,
    string,
    BigNumber
], {
    operator: string;
    tokenOwner: string;
    amount: BigNumber;
}>;
export declare type AuthorizedOperatorEventFilter = TypedEventFilter<AuthorizedOperatorEvent>;
export declare type DataChangedEvent = TypedEvent<[
    string,
    string
], {
    key: string;
    value: string;
}>;
export declare type DataChangedEventFilter = TypedEventFilter<DataChangedEvent>;
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], {
    previousOwner: string;
    newOwner: string;
}>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export declare type RevokedOperatorEvent = TypedEvent<[
    string,
    string
], {
    operator: string;
    tokenOwner: string;
}>;
export declare type RevokedOperatorEventFilter = TypedEventFilter<RevokedOperatorEvent>;
export declare type TransferEvent = TypedEvent<[
    string,
    string,
    string,
    BigNumber,
    boolean,
    string
], {
    operator: string;
    from: string;
    to: string;
    amount: BigNumber;
    force: boolean;
    data: string;
}>;
export declare type TransferEventFilter = TypedEventFilter<TransferEvent>;
export interface LSP7CappedSupply extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: LSP7CappedSupplyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        authorizeOperator(operator: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        decimals(overrides?: CallOverrides): Promise<[BigNumber]>;
        getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<[string[]] & {
            values: string[];
        }>;
        isOperatorFor(operator: string, tokenOwner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        revokeOperator(operator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setData(_keys: BytesLike[], _values: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        tokenSupplyCap(overrides?: CallOverrides): Promise<[BigNumber]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transfer(from: string, to: string, amount: BigNumberish, force: boolean, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferBatch(from: string[], to: string[], amount: BigNumberish[], force: boolean, data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    authorizeOperator(operator: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;
    decimals(overrides?: CallOverrides): Promise<BigNumber>;
    getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
    isOperatorFor(operator: string, tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    revokeOperator(operator: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setData(_keys: BytesLike[], _values: BytesLike[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    tokenSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transfer(from: string, to: string, amount: BigNumberish, force: boolean, data: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferBatch(from: string[], to: string[], amount: BigNumberish[], force: boolean, data: BytesLike[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        authorizeOperator(operator: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        isOperatorFor(operator: string, tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>;
        setData(_keys: BytesLike[], _values: BytesLike[], overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        tokenSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(from: string, to: string, amount: BigNumberish, force: boolean, data: BytesLike, overrides?: CallOverrides): Promise<void>;
        transferBatch(from: string[], to: string[], amount: BigNumberish[], force: boolean, data: BytesLike[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AuthorizedOperator(address,address,uint256)"(operator?: string | null, tokenOwner?: string | null, amount?: BigNumberish | null): AuthorizedOperatorEventFilter;
        AuthorizedOperator(operator?: string | null, tokenOwner?: string | null, amount?: BigNumberish | null): AuthorizedOperatorEventFilter;
        "DataChanged(bytes32,bytes)"(key?: BytesLike | null, value?: null): DataChangedEventFilter;
        DataChanged(key?: BytesLike | null, value?: null): DataChangedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "RevokedOperator(address,address)"(operator?: string | null, tokenOwner?: string | null): RevokedOperatorEventFilter;
        RevokedOperator(operator?: string | null, tokenOwner?: string | null): RevokedOperatorEventFilter;
        "Transfer(address,address,address,uint256,bool,bytes)"(operator?: string | null, from?: string | null, to?: string | null, amount?: null, force?: null, data?: null): TransferEventFilter;
        Transfer(operator?: string | null, from?: string | null, to?: string | null, amount?: null, force?: null, data?: null): TransferEventFilter;
    };
    estimateGas: {
        authorizeOperator(operator: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;
        isOperatorFor(operator: string, tokenOwner: string, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        revokeOperator(operator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setData(_keys: BytesLike[], _values: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        tokenSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(from: string, to: string, amount: BigNumberish, force: boolean, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferBatch(from: string[], to: string[], amount: BigNumberish[], force: boolean, data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        authorizeOperator(operator: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(tokenOwner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getData(_keys: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isOperatorFor(operator: string, tokenOwner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        revokeOperator(operator: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setData(_keys: BytesLike[], _values: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tokenSupplyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transfer(from: string, to: string, amount: BigNumberish, force: boolean, data: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferBatch(from: string[], to: string[], amount: BigNumberish[], force: boolean, data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
