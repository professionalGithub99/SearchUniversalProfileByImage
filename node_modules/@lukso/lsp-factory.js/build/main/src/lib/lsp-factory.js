"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LSPFactory = void 0;
const ethers_1 = require("ethers");
const digital_asset_1 = require("./classes/digital-asset");
const lsp3_universal_profile_1 = require("./classes/lsp3-universal-profile");
const proxy_deployer_1 = require("./classes/proxy-deployer");
/**
 * Factory for creating LSP3UniversalProfiles / LSP4DigitalCertificates
 */
class LSPFactory {
    /**
     * TBD
     *
     * @param {string | providers.Web3Provider | providers.JsonRpcProvider} rpcUrlOrProvider
     * @param {string | Signer | SignerOptions} privateKeyOrSigner
     * @param {number} [chainId=22] Lukso Testnet - 22 (0x16)
     */
    constructor(rpcUrlOrProvider, privateKeyOrSigner) {
        let signer;
        let provider;
        let chainId = 22;
        if (rpcUrlOrProvider instanceof ethers_1.providers.Web3Provider ||
            rpcUrlOrProvider instanceof ethers_1.providers.JsonRpcProvider) {
            provider = rpcUrlOrProvider;
        }
        else {
            provider = new ethers_1.ethers.providers.JsonRpcProvider(rpcUrlOrProvider);
        }
        if (privateKeyOrSigner instanceof ethers_1.Signer) {
            signer = privateKeyOrSigner;
        }
        else if (typeof privateKeyOrSigner === 'string') {
            signer = new ethers_1.ethers.Wallet(privateKeyOrSigner, provider);
        }
        else {
            signer = new ethers_1.ethers.Wallet(privateKeyOrSigner.deployKey, provider);
            chainId = privateKeyOrSigner.chainId;
        }
        this.options = {
            signer,
            provider,
            chainId,
        };
        this.DigitalAsset = new digital_asset_1.DigitalAsset(this.options);
        this.LSP3UniversalProfile = new lsp3_universal_profile_1.LSP3UniversalProfile(this.options);
        this.ProxyDeployer = new proxy_deployer_1.ProxyDeployer(this.options.signer);
    }
}
exports.LSPFactory = LSPFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHNwLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2xzcC1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtRDtBQUVuRCwyREFBdUQ7QUFDdkQsNkVBQXdFO0FBQ3hFLDZEQUF5RDtBQUl6RDs7R0FFRztBQUNILE1BQWEsVUFBVTtJQUtyQjs7Ozs7O09BTUc7SUFDSCxZQUNFLGdCQUE2RSxFQUM3RSxrQkFBbUQ7UUFFbkQsSUFBSSxNQUFjLENBQUM7UUFDbkIsSUFBSSxRQUE0RCxDQUFDO1FBQ2pFLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVqQixJQUNFLGdCQUFnQixZQUFZLGtCQUFTLENBQUMsWUFBWTtZQUNsRCxnQkFBZ0IsWUFBWSxrQkFBUyxDQUFDLGVBQWUsRUFDckQ7WUFDQSxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7U0FDN0I7YUFBTTtZQUNMLFFBQVEsR0FBRyxJQUFJLGVBQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbkU7UUFFRCxJQUFJLGtCQUFrQixZQUFZLGVBQU0sRUFBRTtZQUN4QyxNQUFNLEdBQUcsa0JBQWtCLENBQUM7U0FDN0I7YUFBTSxJQUFJLE9BQU8sa0JBQWtCLEtBQUssUUFBUSxFQUFFO1lBQ2pELE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDMUQ7YUFBTTtZQUNMLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ25FLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUM7U0FDdEM7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsTUFBTTtZQUNOLFFBQVE7WUFDUixPQUFPO1NBQ1IsQ0FBQztRQUVGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSw0QkFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSw2Q0FBb0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDhCQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDO0NBQ0Y7QUFoREQsZ0NBZ0RDIn0=