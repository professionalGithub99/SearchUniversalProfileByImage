"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBaseContractAddresses = exports.getProxyByteCode = exports.deployProxyContract = exports.deployBaseContract = exports.deployContract = exports.initialize = exports.waitForReceipt = void 0;
const ethers_1 = require("ethers");
const operators_1 = require("rxjs/operators");
const deployment_events_1 = require("../interfaces/deployment-events");
const config_helper_1 = require("./config.helper");
/**
 *
 *
 * @export
 * @template T
 * @param {*} deploymentEvent$
 * @return {*}  {Observable<T>}
 */
function waitForReceipt(deploymentEvent$) {
    return deploymentEvent$.pipe((0, operators_1.switchMap)(async (deploymentEvent) => {
        let status, functionName;
        status = deployment_events_1.DeploymentStatus.COMPLETE;
        switch (deploymentEvent.type) {
            case deployment_events_1.DeploymentType.PROXY:
                functionName = deploymentEvent.functionName;
                status = functionName ? deployment_events_1.DeploymentStatus.COMPLETE : deployment_events_1.DeploymentStatus.PENDING;
                break;
            case deployment_events_1.DeploymentType.TRANSACTION:
                functionName = deploymentEvent.functionName;
                break;
        }
        const receipt = await deploymentEvent.transaction.wait();
        return Object.assign(Object.assign({ type: deploymentEvent.type, contractName: deploymentEvent.contractName }, (functionName && { functionName })), { status,
            receipt });
    }), (0, operators_1.catchError)((error) => {
        const message = 'Error when waiting for the transaction receipt: ' + error.message;
        throw new Error(message);
    }));
}
exports.waitForReceipt = waitForReceipt;
function initialize(deploymentEvent$, factory, initArguments) {
    const initialize$ = deploymentEvent$.pipe((0, operators_1.takeLast)(1), (0, operators_1.switchMap)(async (result) => {
        const contract = await factory.attach(result.receipt.contractAddress);
        const initializeParams = await initArguments(result);
        const transaction = await contract.initialize(...initializeParams, {
            gasLimit: 3000000,
            gasPrice: config_helper_1.GAS_PRICE,
        });
        return {
            type: result.type,
            contractName: result.contractName,
            functionName: 'initialize',
            status: result.status,
            transaction,
        };
    }), (0, operators_1.shareReplay)());
    return initialize$;
}
exports.initialize = initialize;
/**
 * TODO: docs
 */
async function deployContract(deployContractFunction, name) {
    try {
        const contract = await deployContractFunction();
        return {
            type: deployment_events_1.DeploymentType.CONTRACT,
            status: deployment_events_1.DeploymentStatus.PENDING,
            contractName: name,
            transaction: contract.deployTransaction,
        };
    }
    catch (error) {
        console.error(`Error when deploying ${name}`, error);
        throw error;
    }
}
exports.deployContract = deployContract;
async function deployBaseContract(deployContractFunction, name) {
    try {
        const contract = await deployContractFunction();
        return {
            type: deployment_events_1.DeploymentType.BASE_CONTRACT,
            status: deployment_events_1.DeploymentStatus.PENDING,
            contractName: name,
            transaction: contract.deployTransaction,
        };
    }
    catch (error) {
        console.error(`Error when deploying ${name}`, error);
        throw error;
    }
}
exports.deployBaseContract = deployBaseContract;
async function deployProxyContract(abi, deployContractFunction, name, signer) {
    try {
        const contract = await deployContractFunction();
        const factory = new ethers_1.ContractFactory(abi, getProxyByteCode(contract.address), signer);
        const deployedProxy = await factory.deploy();
        const transaction = deployedProxy.deployTransaction;
        return {
            type: deployment_events_1.DeploymentType.PROXY,
            contractName: name,
            status: deployment_events_1.DeploymentStatus.PENDING,
            transaction,
        };
    }
    catch (error) {
        console.error(`Error when deploying ${name}`, error);
        throw error;
    }
}
exports.deployProxyContract = deployProxyContract;
/**
 * Produces the bytecode needed to deploy a minimal proxy contract
 * https://eips.ethereum.org/EIPS/eip-1167
 *
 * @export
 * @param {string} address
 * @return {string}
 */
function getProxyByteCode(address) {
    // prettier-ignore
    return `0x3d602d80600a3d3981f3363d3d373d3d3d363d73${address.substr(2)}5af43d82803e903d91602b57fd5bf3`;
}
exports.getProxyByteCode = getProxyByteCode;
function getBaseContractAddresses(contractDeploymentOptions) {
    return contractDeploymentOptions.libAddresses;
}
exports.getBaseContractAddresses = getBaseContractAddresses;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudC5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2hlbHBlcnMvZGVwbG95bWVudC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQThFO0FBRTlFLDhDQUE4RTtBQUU5RSx1RUFPeUM7QUFHekMsbURBQTRDO0FBRTVDOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixjQUFjLENBQUksZ0JBQWdCO0lBQ2hELE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUMxQixJQUFBLHFCQUFTLEVBQUMsS0FBSyxFQUFFLGVBQWdDLEVBQUUsRUFBRTtRQUNuRCxJQUFJLE1BQU0sRUFBRSxZQUFZLENBQUM7UUFFekIsTUFBTSxHQUFHLG9DQUFnQixDQUFDLFFBQVEsQ0FBQztRQUVuQyxRQUFRLGVBQWUsQ0FBQyxJQUFJLEVBQUU7WUFDNUIsS0FBSyxrQ0FBYyxDQUFDLEtBQUs7Z0JBQ3ZCLFlBQVksR0FBRyxlQUFlLENBQUMsWUFBWSxDQUFDO2dCQUM1QyxNQUFNLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxvQ0FBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLG9DQUFnQixDQUFDLE9BQU8sQ0FBQztnQkFDN0UsTUFBTTtZQUNSLEtBQUssa0NBQWMsQ0FBQyxXQUFXO2dCQUM3QixZQUFZLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQztnQkFDNUMsTUFBTTtTQUNUO1FBQ0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pELHFDQUNFLElBQUksRUFBRSxlQUFlLENBQUMsSUFBSSxFQUMxQixZQUFZLEVBQUUsZUFBZSxDQUFDLFlBQVksSUFDdkMsQ0FBQyxZQUFZLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQyxLQUNyQyxNQUFNO1lBQ04sT0FBTyxJQUNQO0lBQ0osQ0FBQyxDQUFDLEVBQ0YsSUFBQSxzQkFBVSxFQUFD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