import { ContractFactory, ContractInterface, Signer } from 'ethers';
import { Observable } from 'rxjs';
import { DeploymentEvent, DeploymentEventBaseContract, DeploymentEventProxyContract, DeploymentEventStandardContract } from '../interfaces/deployment-events';
import { ContractDeploymentOptions } from '../interfaces/profile-deployment';
/**
 *
 *
 * @export
 * @template T
 * @param {*} deploymentEvent$
 * @return {*}  {Observable<T>}
 */
export declare function waitForReceipt<T>(deploymentEvent$: any): Observable<T>;
export declare function initialize(deploymentEvent$: Observable<DeploymentEvent>, factory: ContractFactory, initArguments: (result: any) => Promise<unknown[]>): Observable<DeploymentEventProxyContract>;
/**
 * TODO: docs
 */
export declare function deployContract(deployContractFunction: any, name: string): Promise<DeploymentEventStandardContract>;
export declare function deployBaseContract(deployContractFunction: any, name: string): Promise<DeploymentEventBaseContract>;
export declare function deployProxyContract(abi: ContractInterface, deployContractFunction: any, name: string, signer: Signer): Promise<DeploymentEventProxyContract>;
/**
 * Produces the bytecode needed to deploy a minimal proxy contract
 * https://eips.ethereum.org/EIPS/eip-1167
 *
 * @export
 * @param {string} address
 * @return {string}
 */
export declare function getProxyByteCode(address: string): string;
export declare function getBaseContractAddresses(contractDeploymentOptions: ContractDeploymentOptions): import("../interfaces/profile-deployment").BaseContractAddresses;
