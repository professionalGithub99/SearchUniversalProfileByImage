"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareImageForLSP3 = exports.ipfsUpload = exports.imageUpload = exports.sizes = void 0;
const browser_image_compression_1 = __importDefault(require("browser-image-compression"));
const utils_1 = require("ethers/lib/utils");
const ipfs_http_client_1 = require("ipfs-http-client");
exports.sizes = [1800, 1024, 640, 320, 180];
async function imageUpload(givenFile, uploadOptions) {
    var _a;
    const isImage = ((_a = givenFile.type) === null || _a === void 0 ? void 0 : _a.substr(0, 6)) === 'image/';
    if (!isImage) {
        throw new Error(`File provided is of type "${givenFile.type}".`);
    }
    return Promise.all(exports.sizes.map(async (size) => {
        const img = await (0, browser_image_compression_1.default)(givenFile, {
            maxWidthOrHeight: size,
            useWebWorker: true,
        });
        const imgBuffer = new Uint8Array(await img.arrayBuffer());
        const loadedImg = await browser_image_compression_1.default.drawFileInCanvas(img);
        const uploadResponse = await ipfsUpload(img, uploadOptions.ipfsClientOptions);
        return {
            width: loadedImg[0].width,
            height: loadedImg[0].height,
            hashFunction: 'keccak256(bytes)',
            hash: (0, utils_1.keccak256)(imgBuffer),
            url: 'ipfs://' + uploadResponse.cid.toString(),
        };
    }));
}
exports.imageUpload = imageUpload;
async function ipfsUpload(file, options) {
    const ipfs = (0, ipfs_http_client_1.create)(options);
    return await ipfs.add(file, {
        pin: true,
    });
}
exports.ipfsUpload = ipfsUpload;
async function prepareImageForLSP3(uploadOptions, image) {
    let lsp3Image;
    if (Array.isArray(image)) {
        lsp3Image = image !== null && image !== void 0 ? image : null;
    }
    else if (image) {
        lsp3Image = await imageUpload(image, uploadOptions);
    }
    return lsp3Image;
}
exports.prepareImageForLSP3 = prepareImageForLSP3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkZXIuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9oZWxwZXJzL3VwbG9hZGVyLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwwRkFBeUQ7QUFDekQsNENBQTZDO0FBRzdDLHVEQUFtRDtBQUt0QyxRQUFBLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUMxQyxLQUFLLFVBQVUsV0FBVyxDQUMvQixTQUFlLEVBQ2YsYUFBbUM7O0lBRW5DLE1BQU0sT0FBTyxHQUFHLENBQUEsTUFBQSxTQUFTLENBQUMsSUFBSSwwQ0FBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFLLFFBQVEsQ0FBQztJQUMxRCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7S0FDbEU7SUFFRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2hCLGFBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxtQ0FBZ0IsRUFBQyxTQUFTLEVBQUU7WUFDNUMsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sU0FBUyxHQUFHLE1BQU0sbUNBQWdCLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0QsTUFBTSxjQUFjLEdBQUcsTUFBTSxVQUFVLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRTlFLE9BQU87WUFDTCxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7WUFDekIsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNO1lBQzNCLFlBQVksRUFBRSxrQkFBa0I7WUFDaEMsSUFBSSxFQUFFLElBQUEsaUJBQVMsRUFBQyxTQUFTLENBQUM7WUFDMUIsR0FBRyxFQUFFLFNBQVMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRTtTQUMvQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNKLENBQUM7QUE3QkQsa0NBNkJDO0FBRU0sS0FBSyxVQUFVLFVBQVUsQ0FBQyxJQUFxQixFQUFFLE9BQWdCO0lBQ3RFLE1BQU0sSUFBSSxHQUFHLElBQUEseUJBQU0sRUFBQyxPQUFPLENBQUMsQ0FBQztJQUM3QixPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7UUFDMUIsR0FBRyxFQUFFLElBQUk7S0FDVixDQUFDLENBQUM7QUFDTCxDQUFDO0FBTEQsZ0NBS0M7QUFFTSxLQUFLLFVBQVUsbUJBQW1CLENBQ3ZDLGFBQW9DLEVBQ3BDLEtBQWlDO0lBRWpDLElBQUksU0FBb0MsQ0FBQztJQUV6QyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDeEIsU0FBUyxHQUFHLEtBQUssYUFBTCxLQUFLLGNBQUwsS0FBSyxHQUFJLElBQUksQ0FBQztLQUMzQjtTQUFNLElBQUksS0FBSyxFQUFFO1FBQ2hCLFNBQVMsR0FBRyxNQUFNLFdBQVcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDckQ7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBYkQsa0RBYUMifQ==