"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LSP3UniversalProfile = void 0;
const experimental_1 = require("@ethersproject/experimental");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const versions_json_1 = __importDefault(require("../../versions.json"));
const config_helper_1 = require("../helpers/config.helper");
const config_helper_2 = require("../helpers/config.helper");
const uploader_helper_1 = require("../helpers/uploader.helper");
const base_contract_service_1 = require("../services/base-contract.service");
const key_manager_service_1 = require("../services/key-manager.service");
const lsp3_account_service_1 = require("./../services/lsp3-account.service");
const universal_receiver_service_1 = require("./../services/universal-receiver.service");
/**
 * TODO: docs
 */
class LSP3UniversalProfile {
    constructor(options) {
        this.options = options;
        this.signer = new experimental_1.NonceManager(options.signer);
    }
    /**
     * TODO: docs
     */
    deployReactive(profileDeploymentOptions, contractDeploymentOptions) {
        var _a, _b, _c, _d, _e;
        // -1 > Run IPFS upload process in parallel with contract deployment
        const lsp3Profile$ = (0, lsp3_account_service_1.lsp3ProfileUpload$)(profileDeploymentOptions.lsp3Profile);
        // 0 > Check for existing base contracts and deploy
        const defaultUPBaseContractAddress = (_b = (_a = versions_json_1.default[this.options.chainId]) === null || _a === void 0 ? void 0 : _a.baseContracts) === null || _b === void 0 ? void 0 : _b.ERC725Account[config_helper_1.DEFAULT_CONTRACT_VERSION];
        const defaultUniversalReceiverBaseContractAddress = (_d = (_c = versions_json_1.default[this.options.chainId]) === null || _c === void 0 ? void 0 : _c.baseContracts) === null || _d === void 0 ? void 0 : _d.UniversalReceiverDelegate[config_helper_1.DEFAULT_CONTRACT_VERSION];
        const defaultBaseContractByteCode$ = (0, rxjs_1.forkJoin)([
            this.getDeployedByteCode(defaultUPBaseContractAddress !== null && defaultUPBaseContractAddress !== void 0 ? defaultUPBaseContractAddress : '0x0000000000000000000000000000000000000000'),
            this.getDeployedByteCode(defaultUniversalReceiverBaseContractAddress !== null && defaultUniversalReceiverBaseContractAddress !== void 0 ? defaultUniversalReceiverBaseContractAddress : '0x0000000000000000000000000000000000000000'),
        ]);
        const baseContractAddresses$ = (0, base_contract_service_1.getUniversalProfileBaseContractAddresses$)(defaultUPBaseContractAddress, defaultUniversalReceiverBaseContractAddress, defaultBaseContractByteCode$, this.signer, contractDeploymentOptions);
        const controllerAddresses = profileDeploymentOptions.controllingAccounts.map((controller) => {
            return typeof controller === 'string' ? controller : controller.address;
        });
        // 1 > deploys ERC725Account
        const account$ = (0, lsp3_account_service_1.accountDeployment$)(this.signer, controllerAddresses, baseContractAddresses$);
        // 2 > deploys KeyManager
        const keyManager$ = (0, key_manager_service_1.keyManagerDeployment$)(this.signer, account$, (_e = contractDeploymentOptions === null || contractDeploymentOptions === void 0 ? void 0 : contractDeploymentOptions.libAddresses) === null || _e === void 0 ? void 0 : _e.keyManagerInit);
        // 3 > deploys UniversalReceiverDelegate
        const universalReceiver$ = (0, universal_receiver_service_1.universalReceiverDelegateDeployment$)(this.signer, account$, baseContractAddresses$);
        // 4 > set permissions, profile and universal
        const setData$ = (0, lsp3_account_service_1.setDataTransaction$)(this.signer, account$, universalReceiver$, profileDeploymentOptions.controllingAccounts, lsp3Profile$);
        // 5 > transfersOwnership to KeyManager
        const transferOwnership$ = (0, lsp3_account_service_1.getTransferOwnershipTransaction$)(this.signer, account$, keyManager$);
        return (0, rxjs_1.concat)([
            account$,
            (0, rxjs_1.merge)(universalReceiver$, keyManager$),
            setData$,
            transferOwnership$,
        ]).pipe((0, operators_1.concatAll)());
    }
    /**
     * TODO: docs
     */
    deploy(profileDeploymentOptions, contractDeploymentOptions) {
        const deployments$ = this.deployReactive(profileDeploymentOptions, contractDeploymentOptions).pipe((0, operators_1.scan)((accumulator, deploymentEvent) => {
            if (deploymentEvent.receipt && deploymentEvent.receipt.contractAddress) {
                accumulator[deploymentEvent.contractName] = {
                    address: deploymentEvent.receipt.contractAddress,
                    receipt: deploymentEvent.receipt,
                };
            }
            return accumulator;
        }, {}));
        return (0, rxjs_1.lastValueFrom)(deployments$);
    }
    getDeployedByteCode(contractAddress) {
        return this.options.provider.getCode(contractAddress);
    }
    deployBaseContracts() {
        const baseContractsToDeploy$ = (0, rxjs_1.of)([true, true]);
        const baseContracts$ = (0, base_contract_service_1.universalProfileBaseContractsDeployment$)(this.signer, baseContractsToDeploy$);
        const deployments$ = baseContracts$.pipe((0, operators_1.scan)((accumulator, deploymentEvent) => {
            if (deploymentEvent.receipt && deploymentEvent.receipt.contractAddress) {
                accumulator[deploymentEvent.contractName] = {
                    address: deploymentEvent.receipt.contractAddress,
                    receipt: deploymentEvent.receipt,
                };
            }
            return accumulator;
        }, {}));
        return (0, rxjs_1.lastValueFrom)(deployments$);
    }
    /**
     * Pre-deploys the latest Version of the LSP3UniversalProfile smart-contracts.
     *
     * @param {'string'} [version] Instead of deploying the latest Version you can also deploy a specific
     *  version of the smart-contracts. A list of all available version is available here.
     */
    async preDeployContracts(version) {
        console.log(version);
    }
    /**
     * Uploads the LSP3Profile to the desired endpoint. This can be an `https` URL either pointing to
     * a public, centralized storage endpoint or an IPFS Node / Cluster
     *
     * @param {ProfileDataBeforeUpload} profileData
     * @return {*}  {(Promise<AddResult | string>)}
     * @memberof LSP3UniversalProfile
     */
    static async uploadProfileData(profileData, uploadOptions) {
        uploadOptions = uploadOptions || config_helper_2.defaultUploadOptions;
        const [profileImage, backgroundImage] = await Promise.all([
            (0, uploader_helper_1.prepareImageForLSP3)(uploadOptions, profileData.profileImage),
            (0, uploader_helper_1.prepareImageForLSP3)(uploadOptions, profileData.backgroundImage),
        ]);
        const profile = {
            LSP3Profile: Object.assign(Object.assign({}, profileData), { profileImage,
                backgroundImage }),
        };
        // TODO: allow simple http upload too
        const uploadResponse = await (0, uploader_helper_1.ipfsUpload)(JSON.stringify(profile), uploadOptions.ipfsClientOptions);
        return {
            profile,
            url: uploadResponse.cid ? 'ipfs://' + uploadResponse.cid : 'https upload TBD',
        };
    }
}
exports.LSP3UniversalProfile = LSP3UniversalProfile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHNwMy11bml2ZXJzYWwtcHJvZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY2xhc3Nlcy9sc3AzLXVuaXZlcnNhbC1wcm9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhEQUEyRDtBQUMzRCwrQkFBa0U7QUFDbEUsOENBQWlEO0FBRWpELHdFQUFtRDtBQUNuRCw0REFBb0U7QUFDcEUsNERBQWdFO0FBQ2hFLGdFQUE2RTtBQVU3RSw2RUFHMkM7QUFDM0MseUVBQXdFO0FBRXhFLDZFQUs0QztBQUM1Qyx5RkFBZ0c7QUFFaEc7O0dBRUc7QUFDSCxNQUFhLG9CQUFvQjtJQUcvQixZQUFZLE9BQTBCO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSwyQkFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxjQUFjLENBQ1osd0JBQWtELEVBQ2xELHlCQUFxRDs7UUFFckQsb0VBQW9FO1FBQ3BFLE1BQU0sWUFBWSxHQUFHLElBQUEseUNBQWtCLEVBQUMsd0JBQXdCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFOUUsbURBQW1EO1FBQ25ELE1BQU0sNEJBQTRCLEdBQ2hDLE1BQUEsTUFBQSx1QkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQywwQ0FBRSxhQUFhLDBDQUFFLGFBQWEsQ0FDbEUsd0NBQXdCLENBQ3pCLENBQUM7UUFDSixNQUFNLDJDQUEyQyxHQUMvQyxNQUFBLE1BQUEsdUJBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsMENBQUUsYUFBYSwwQ0FBRSx5QkFBeUIsQ0FDOUUsd0NBQXdCLENBQ3pCLENBQUM7UUFFSixNQUFNLDRCQUE0QixHQUFHLElBQUEsZUFBUSxFQUFDO1lBQzVDLElBQUksQ0FB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