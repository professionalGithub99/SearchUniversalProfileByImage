"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUniversalProfileBaseContractAddresses$ = exports.digitalAssetBaseContractsDeployment$ = exports.universalProfileBaseContractsDeployment$ = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const __1 = require("../..");
const config_helper_1 = require("../helpers/config.helper");
const deployment_helper_1 = require("../helpers/deployment.helper");
const digital_asset_deployment_1 = require("../interfaces/digital-asset-deployment");
function universalProfileBaseContractsDeployment$(signer, baseContractsToDeploy$) {
    const erc725AccountBaseContractDeploymentReceipt$ = deployBaseContract$(__1.ContractNames.ERC725_Account, async () => {
        const universalProfileInit = await new __1.UniversalProfileInit__factory(signer).deploy({
            gasPrice: config_helper_1.GAS_PRICE,
        });
        await universalProfileInit.initialize(config_helper_1.NULL_ADDRESS);
        return universalProfileInit;
    });
    const universalReceiverBaseContractDeploymentReceipt$ = deployBaseContract$(__1.ContractNames.UNIVERSAL_RECEIVER, () => {
        return new __1.LSP1UniversalReceiverDelegateInit__factory(signer).deploy({ gasPrice: config_helper_1.GAS_PRICE });
    });
    const baseContractDeployment$ = baseContractsToDeploy$.pipe((0, operators_1.switchMap)(([shouldDeployUPBaseContract, shouldDeployUniversalReceiverBaseContract]) => {
        return (0, rxjs_1.merge)(shouldDeployUPBaseContract ? erc725AccountBaseContractDeploymentReceipt$ : rxjs_1.EMPTY, shouldDeployUniversalReceiverBaseContract
            ? universalReceiverBaseContractDeploymentReceipt$
            : rxjs_1.EMPTY);
    }), (0, operators_1.shareReplay)());
    return baseContractDeployment$;
}
exports.universalProfileBaseContractsDeployment$ = universalProfileBaseContractsDeployment$;
function digitalAssetBaseContractsDeployment$(signer, baseContractsToDeploy$) {
    const lsp7DigitalAssetBaseContractReceipt$ = deployBaseContract$(digital_asset_deployment_1.ContractNames.LSP7_DIGITAL_ASSET, async () => {
        const lsp7Init = await new __1.LSP7DigitalAssetInit__factory(signer).deploy({
            gasPrice: config_helper_1.GAS_PRICE,
        });
        await lsp7Init['initialize(address)'](config_helper_1.NULL_ADDRESS);
        return lsp7Init;
    });
    const lsp8IdentifiableDigitalAssetReceipt$ = deployBaseContract$(digital_asset_deployment_1.ContractNames.LSP8_DIGITAL_ASSET, async () => {
        const lsp8Init = await new __1.LSP8IdentifiableDigitalAssetInit__factory(signer).deploy({
            gasPrice: config_helper_1.GAS_PRICE,
        });
        await lsp8Init['initialize(address)'](config_helper_1.NULL_ADDRESS);
        return lsp8Init;
    });
    const baseContractDeployment$ = baseContractsToDeploy$.pipe((0, operators_1.switchMap)(([shouldDeployLSP7, shouldDeployLSP8]) => {
        return (0, rxjs_1.merge)(shouldDeployLSP7 ? lsp7DigitalAssetBaseContractReceipt$ : rxjs_1.EMPTY, shouldDeployLSP8 ? lsp8IdentifiableDigitalAssetReceipt$ : rxjs_1.EMPTY);
    }), (0, operators_1.shareReplay)());
    return baseContractDeployment$;
}
exports.digitalAssetBaseContractsDeployment$ = digitalAssetBaseContractsDeployment$;
function deployBaseContract$(contractName, deployContractFunction) {
    const deployContract = () => {
        return (0, deployment_helper_1.deployBaseContract)(deployContractFunction, contractName);
    };
    const baseContractDeployment$ = (0, rxjs_1.defer)(() => deployContract()).pipe((0, operators_1.shareReplay)());
    const baseContractDeploymentReceipt$ = (0, deployment_helper_1.waitForReceipt)(baseContractDeployment$).pipe((0, operators_1.shareReplay)());
    return baseContractDeploymentReceipt$;
}
function getUniversalProfileBaseContractAddresses$(defaultUPBaseContractAddress, defaultUniversalReceiverBaseContractAddress, defaultBaseContractByteCode$, signer, contractDeploymentOptions) {
    var _a, _b;
    const providedUPBaseContractAddress = (_a = contractDeploymentOptions === null || contractDeploymentOptions === void 0 ? void 0 : contractDeploymentOptions.libAddresses) === null || _a === void 0 ? void 0 : _a.erc725AccountInit;
    const providedUniversalReceiverContractAddress = (_b = contractDeploymentOptions === null || contractDeploymentOptions === void 0 ? void 0 : contractDeploymentOptions.libAddresses) === null || _b === void 0 ? void 0 : _b.universalReceiverDelegateInit;
    const baseContractsToDeploy$ = defaultBaseContractByteCode$.pipe((0, operators_1.switchMap)(([defaultUPBaseContractByteCode, defaultUniversalReceiverBaseContractByteCode]) => {
        const shouldDeployUPBaseContract = !providedUPBaseContractAddress && defaultUPBaseContractByteCode === '0x';
        const shouldDeployUniversalReceiverBaseContract = !providedUniversalReceiverContractAddress &&
            defaultUniversalReceiverBaseContractByteCode === '0x';
        return (0, rxjs_1.of)([shouldDeployUPBaseContract, shouldDeployUniversalReceiverBaseContract]);
    }));
    const baseContracts$ = universalProfileBaseContractsDeployment$(signer, baseContractsToDeploy$);
    const baseContractAddresses = {
        [__1.ContractNames.ERC725_Account]: providedUPBaseContractAddress !== null && providedUPBaseContractAddress !== void 0 ? providedUPBaseContractAddress : defaultUPBaseContractAddress,
        [__1.ContractNames.UNIVERSAL_RECEIVER]: providedUniversalReceiverContractAddress !== null && providedUniversalReceiverContractAddress !== void 0 ? providedUniversalReceiverContractAddress : defaultUniversalReceiverBaseContractAddress,
    };
    const baseContractAddresses$ = baseContracts$.pipe((0, operators_1.tap)((deploymentEvent) => {
        baseContractAddresses[deploymentEvent.contractName] = deploymentEvent.receipt.contractAddress;
    }), (0, operators_1.defaultIfEmpty)((0, rxjs_1.of)(baseContractAddresses)), (0, operators_1.switchMap)(() => (0, rxjs_1.of)(baseContractAddresses)), (0, operators_1.shareReplay)());
    return baseContractAddresses$;
}
exports.getUniversalProfileBaseContractAddresses$ = getUniversalProfileBaseContractAddresses$;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb250cmFjdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9iYXNlLWNvbnRyYWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0JBQTJEO0FBQzNELDhDQUE2RTtBQUU3RSw2QkFRZTtBQUNmLDREQUFtRTtBQUNuRSxvRUFBa0Y7QUFDbEYscUZBQW9HO0FBRXBHLFNBQWdCLHdDQUF3QyxDQUN0RCxNQUFjLEVBQ2Qsc0JBQXNEO0lBRXRELE1BQU0sMkNBQTJDLEdBQUcsbUJBQW1CLENBQ3JFLGlCQUE2QixDQUFDLGNBQWMsRUFDNUMsS0FBSyxJQUFJLEVBQUU7UUFDVCxNQUFNLG9CQUFvQixHQUFHLE1BQU0sSUFBSSxpQ0FBNkIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDbEYsUUFBUSxFQUFFLHlCQUFTO1NBQ3BCLENBQUMsQ0FBQztRQUNILE1BQU0sb0JBQW9CLENBQUMsVUFBVSxDQUFDLDRCQUFZLENBQUMsQ0FBQztRQUNwRCxPQUFPLG9CQUFvQixDQUFDO0lBQzlCLENBQUMsQ0FDRixDQUFDO0lBRUYsTUFBTSwrQ0FBK0MsR0FBRyxtQkFBbUIsQ0FDekUsaUJBQTZCLENBQUMsa0JBQWtCLEVBQ2hELEdBQUcsRUFBRTtRQUNILE9BQU8sSUFBSSw4Q0FBMEMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUseUJBQVMsRUFBRSxDQUFDLENBQUM7SUFDaEcsQ0FBQyxDQUNGLENBQUM7SUFFRixNQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDLElBQUksQ0FDekQsSUFBQSxxQkFBUyxFQUFDLENBQUMsQ0FBQywwQkFBMEIsRUFBRSx5Q0FBeUMsQ0FBQyxFQUFFLEVBQUU7UUFDcEYsT0FBTyxJQUFBLFlBQUssRUFDViwwQkFBMEIsQ0FBQyxDQUFDLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxD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