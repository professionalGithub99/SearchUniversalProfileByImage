"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferOwnership = exports.getTransferOwnershipTransaction$ = exports.setData = exports.lsp3ProfileUpload$ = exports.isLSP3ProfileDataEncoded = exports.getLsp3ProfileDataUrl = exports.setDataTransaction$ = exports.deployProxyContract = exports.accountDeploymentWithBaseContractAddress$ = exports.accountDeployment$ = void 0;
const axios_1 = __importDefault(require("axios"));
const ethers_1 = require("ethers");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const __1 = require("../..");
const config_helper_1 = require("../helpers/config.helper");
const deployment_helper_1 = require("../helpers/deployment.helper");
const erc725_helper_1 = require("../helpers/erc725.helper");
const interfaces_1 = require("../interfaces");
function accountDeployment$(signer, controllerAddresses, baseContractAddresses$) {
    return baseContractAddresses$.pipe((0, operators_1.switchMap)((baseContractAddresses) => {
        return accountDeploymentWithBaseContractAddress$(signer, controllerAddresses, baseContractAddresses.ERC725Account);
    }), (0, operators_1.shareReplay)());
}
exports.accountDeployment$ = accountDeployment$;
function accountDeploymentWithBaseContractAddress$(signer, controllerAddresses, baseContractAddress) {
    const accountDeployment$ = (0, rxjs_1.defer)(() => deployLSP3Account(signer, controllerAddresses, baseContractAddress)).pipe((0, operators_1.shareReplay)());
    const accountDeploymentReceipt$ = (0, deployment_helper_1.waitForReceipt)(accountDeployment$).pipe((0, operators_1.shareReplay)());
    const accountDeploymentInitialize$ = baseContractAddress
        ? initializeProxy(signer, accountDeploymentReceipt$)
        : rxjs_1.EMPTY;
    const accountDeploymentInitializeReceipt$ = (0, deployment_helper_1.waitForReceipt)(accountDeploymentInitialize$).pipe((0, operators_1.shareReplay)());
    return (0, rxjs_1.concat)(accountDeployment$, accountDeploymentReceipt$, accountDeploymentInitialize$, accountDeploymentInitializeReceipt$);
}
exports.accountDeploymentWithBaseContractAddress$ = accountDeploymentWithBaseContractAddress$;
async function deployLSP3Account(signer, ownerAddresses, baseContractAddress) {
    const deploymentFunction = async () => {
        return baseContractAddress
            ? new __1.UniversalProfileInit__factory(signer).attach(baseContractAddress)
            : await new __1.UniversalProfile__factory(signer).deploy(ownerAddresses[0]);
    };
    return baseContractAddress
        ? deployProxyContract(deploymentFunction, signer)
        : (0, deployment_helper_1.deployContract)(deploymentFunction, interfaces_1.ContractNames.ERC725_Account);
}
async function deployProxyContract(deployContractFunction, signer) {
    try {
        const contract = await deployContractFunction();
        const factory = new ethers_1.ContractFactory(__1.UniversalProfile__factory.abi, (0, deployment_helper_1.getProxyByteCode)(contract.address), signer);
        const deployedProxy = await factory.deploy(signer.getAddress());
        const transaction = deployedProxy.deployTransaction;
        return {
            type: interfaces_1.DeploymentType.PROXY,
            contractName: interfaces_1.ContractNames.ERC725_Account,
            status: interfaces_1.DeploymentStatus.PENDING,
            transaction,
        };
    }
    catch (error) {
        console.error(`Error when deploying ${interfaces_1.ContractNames.ERC725_Account}`, error);
        throw error;
    }
}
exports.deployProxyContract = deployProxyContract;
function initializeProxy(signer, accountDeploymentReceipt$) {
    return (0, deployment_helper_1.initialize)(accountDeploymentReceipt$, new __1.UniversalProfileInit__factory(signer), async () => {
        const signerAddress = await signer.getAddress();
        return [signerAddress];
    }).pipe((0, operators_1.shareReplay)());
}
function setDataTransaction$(signer, account$, universalReceiver$, controllerAddresses, lsp3ProfileData$) {
    const setDataTransaction$ = (0, rxjs_1.forkJoin)([account$, universalReceiver$, lsp3ProfileData$]).pipe((0, operators_1.switchMap)(([{ receipt: lsp3AccountReceipt }, { receipt: universalReceiverDelegateReceipt }, lsp3ProfileData,]) => {
        return setData(signer, lsp3AccountReceipt.contractAddress || lsp3AccountReceipt.to, universalReceiverDelegateReceipt.contractAddress || universalReceiverDelegateReceipt.to, controllerAddresses, lsp3ProfileData);
    }), (0, operators_1.shareReplay)());
    const setDataReceipt$ = (0, deployment_helper_1.waitForReceipt)(setDataTransaction$);
    return (0, rxjs_1.concat)(setDataTransaction$, setDataReceipt$);
}
exports.setDataTransaction$ = setDataTransaction$;
async function getLsp3ProfileDataUrl(lsp3Profile) {
    let lsp3ProfileData;
    if (typeof lsp3Profile === 'string') {
        let lsp3JsonUrl = lsp3Profile;
        const isIPFSUrl = lsp3Profile.startsWith('ipfs://');
        if (isIPFSUrl) {
            lsp3JsonUrl = 'https://ipfs.lukso.network/ipfs/' + lsp3Profile.split('/').at(-1); // TODO: Allow custom IPFS upload location
        }
        const ipfsResponse = await axios_1.default.get(lsp3JsonUrl);
        const lsp3ProfileJson = ipfsResponse.data;
        lsp3ProfileData = {
            url: lsp3Profile,
            profile: lsp3ProfileJson,
        };
    }
    else {
        lsp3ProfileData = await __1.LSP3UniversalProfile.uploadProfileData(lsp3Profile);
    }
    return lsp3ProfileData;
}
exports.getLsp3ProfileDataUrl = getLsp3ProfileDataUrl;
function isLSP3ProfileDataEncoded(lsp3Profile) {
    if (!lsp3Profile.startsWith('ipfs://') && !lsp3Profile.startsWith('https://')) {
        return true;
    }
    return false;
}
exports.isLSP3ProfileDataEncoded = isLSP3ProfileDataEncoded;
function lsp3ProfileUpload$(lsp3Profile) {
    let lsp3Profile$;
    if (typeof lsp3Profile !== 'string' || !isLSP3ProfileDataEncoded(lsp3Profile)) {
        lsp3Profile$ = lsp3Profile ? (0, rxjs_1.from)(getLsp3ProfileDataUrl(lsp3Profile)) : (0, rxjs_1.of)(null);
    }
    else {
        lsp3Profile$ = (0, rxjs_1.of)(lsp3Profile);
    }
    return lsp3Profile$;
}
exports.lsp3ProfileUpload$ = lsp3ProfileUpload$;
/**
 * TODO: docs
 */
async function setData(signer, erc725AccountAddress, universalReceiverDelegateAddress, controllerAddresses, lsp3Profile) {
    let encodedLSP3Profile;
    if (lsp3Profile && typeof lsp3Profile !== 'string') {
        const encodedDataResult = lsp3Profile
            ? (0, erc725_helper_1.encodeLSP3Profile)(lsp3Profile.profile, lsp3Profile.url)
            : null;
        encodedLSP3Profile = encodedDataResult.LSP3Profile.value;
    }
    else {
        encodedLSP3Profile = lsp3Profile;
    }
    const erc725Account = new __1.UniversalProfile__factory(signer).attach(erc725AccountAddress);
    let controllerAddress;
    let signerPermissions;
    if (typeof controllerAddresses[0] === 'string') {
        controllerAddress = controllerAddresses[0];
    }
    else {
        controllerAddress = controllerAddresses[0].address;
        signerPermissions = controllerAddresses[0].permissions;
    }
    const keysToSet = [
        config_helper_1.LSP3_UP_KEYS.UNIVERSAL_RECEIVER_DELEGATE_KEY,
        config_helper_1.PREFIX_PERMISSIONS + controllerAddress.substr(2),
        config_helper_1.PREFIX_PERMISSIONS + universalReceiverDelegateAddress.substr(2),
        config_helper_1.ADDRESS_PERMISSIONS_ARRAY_KEY,
        config_helper_1.ADDRESS_PERMISSIONS_ARRAY_KEY.slice(0, 34) + '00000000000000000000000000000000',
        config_helper_1.ADDRESS_PERMISSIONS_ARRAY_KEY.slice(0, 34) + '00000000000000000000000000000001',
    ];
    const valuesToSet = [
        universalReceiverDelegateAddress,
        signerPermissions !== null && signerPermissions !== void 0 ? signerPermissions : config_helper_1.ALL_PERMISSIONS,
        config_helper_1.SET_DATA_PERMISSION,
        2,
        controllerAddress,
        universalReceiverDelegateAddress,
    ];
    if (encodedLSP3Profile) {
        keysToSet.push(config_helper_1.LSP3_UP_KEYS.LSP3_PROFILE);
        valuesToSet.push(encodedLSP3Profile);
    }
    const transaction = await erc725Account.setData(keysToSet, valuesToSet, {
        gasLimit: 1000000,
    });
    return {
        type: interfaces_1.DeploymentType.TRANSACTION,
        contractName: interfaces_1.ContractNames.ERC725_Account,
        functionName: 'setData',
        status: interfaces_1.DeploymentStatus.PENDING,
        transaction,
    };
}
exports.setData = setData;
function getTransferOwnershipTransaction$(signer, accountDeployment$, keyManagerDeployment$) {
    const transferOwnershipTransaction$ = (0, rxjs_1.forkJoin)([accountDeployment$, keyManagerDeployment$]).pipe((0, operators_1.switchMap)(([{ receipt: lsp3AccountReceipt }, { receipt: keyManagerContract }]) => {
        return transferOwnership(signer, lsp3AccountReceipt, keyManagerContract);
    }), (0, operators_1.shareReplay)());
    const transferOwnershipReceipt$ = (0, deployment_helper_1.waitForReceipt)(transferOwnershipTransaction$);
    return (0, rxjs_1.concat)(transferOwnershipTransaction$, transferOwnershipReceipt$);
}
exports.getTransferOwnershipTransaction$ = getTransferOwnershipTransaction$;
/**
 * TODO: docs
 */
async function transferOwnership(signer, lsp3AccountReceipt, keyManagerReceipt) {
    try {
        const signerAddress = await signer.getAddress();
        const contract = new __1.UniversalProfile__factory(signer).attach(lsp3AccountReceipt.contractAddress || lsp3AccountReceipt.to);
        const transaction = await contract.transferOwnership(keyManagerReceipt.contractAddress || keyManagerReceipt.to, {
            from: signerAddress,
            gasLimit: 500000,
        });
        return {
            type: interfaces_1.DeploymentType.TRANSACTION,
            status: interfaces_1.DeploymentStatus.PENDING,
            contractName: interfaces_1.ContractNames.ERC725_Account,
            functionName: 'transferOwnership',
            transaction,
        };
    }
    catch (error) {
        console.error('Error when transferring Ownership', error);
        throw error;
    }
}
exports.transferOwnership = transferOwnership;
//# sourceMappingURL=data:application/json;base64,