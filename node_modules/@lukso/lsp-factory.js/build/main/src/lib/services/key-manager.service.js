"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployKeyManager = exports.keyManagerDeployment$ = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const __1 = require("../..");
const deployment_helper_1 = require("../helpers/deployment.helper");
const interfaces_1 = require("../interfaces");
function keyManagerDeployment$(signer, accountDeployment$, baseContractAddress) {
    const keyManagerDeployment$ = accountDeployment$.pipe((0, operators_1.takeLast)(1), (0, operators_1.switchMap)(({ receipt }) => {
        const erc725AccountAddress = receipt.contractAddress || receipt.to;
        return deployKeyManager(signer, erc725AccountAddress, baseContractAddress);
    }), (0, operators_1.shareReplay)());
    const keyManagerDeploymentReceipt$ = (0, deployment_helper_1.waitForReceipt)(keyManagerDeployment$).pipe((0, operators_1.shareReplay)());
    if (baseContractAddress) {
        throw new Error('Not yet implemented');
        // const keyManagerDeploymentInitialize$ = baseContractAddress
        // ? initializeProxy(
        //     signer,
        //     keyManagerDeploymentReceipt$ as Observable<DeploymentEventProxyContract<KeyManagerInit>>
        //   )
        // : EMPTY;
    }
    const keyManagerDeploymentInitialize$ = rxjs_1.EMPTY;
    return (0, rxjs_1.concat)(keyManagerDeployment$, keyManagerDeploymentReceipt$, keyManagerDeploymentInitialize$);
}
exports.keyManagerDeployment$ = keyManagerDeployment$;
/**
 * TODO: docs
 */
async function deployKeyManager(signer, lsp3AccountAddress, baseContractAddress) {
    const deploymentFunction = async () => {
        return await new __1.LSP6KeyManager__factory(signer).deploy(lsp3AccountAddress, {
            gasLimit: 3000000,
        });
    };
    if (baseContractAddress) {
        throw new Error('Not yet implemented');
    }
    return (0, deployment_helper_1.deployContract)(deploymentFunction, interfaces_1.ContractNames.KEY_MANAGER);
}
exports.deployKeyManager = deployKeyManager;
// function initializeProxy(
//   signer: Signer,
//   accountDeploymentReceipt$: Observable<DeploymentEventProxyContract<LSP3AccountInit>>
// ) {
//   return initialize<KeyManagerInit>(
//     accountDeploymentReceipt$,
//     new KeyManagerInit__factory(signer),
//     (result: DeploymentEvent<KeyManagerInit>) => {
//       return result.initArguments;
//     }
//   ).pipe(shareReplay());
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LW1hbmFnZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc2VydmljZXMva2V5LW1hbmFnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBaUQ7QUFDakQsOENBQWtFO0FBRWxFLDZCQUFnRDtBQUNoRCxvRUFBOEU7QUFDOUUsOENBQXVFO0FBTXZFLFNBQWdCLHFCQUFxQixDQUNuQyxNQUFjLEVBQ2Qsa0JBQTBELEVBQzFELG1CQUEyQjtJQUUzQixNQUFNLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FDbkQsSUFBQSxvQkFBUSxFQUFDLENBQUMsQ0FBQyxFQUNYLElBQUEscUJBQVMsRUFBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtRQUN4QixNQUFNLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNuRSxPQUFPLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQzdFLENBQUMsQ0FBQyxFQUNGLElBQUEsdUJBQVcsR0FBRSxDQUNkLENBQUM7SUFFRixNQUFNLDRCQUE0QixHQUFHLElBQUEsa0NBQWMsRUFDakQscUJBQXFCLENBQ3RCLENBQUMsSUFBSSxDQUFDLElBQUEsdUJBQVcsR0FBRSxDQUFDLENBQUM7SUFFdEIsSUFBSSxtQkFBbUIsRUFBRTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDdkMsOERBQThEO1FBQzlELHFCQUFxQjtRQUNyQixjQUFjO1FBQ2QsK0ZBQStGO1FBQy9GLE1BQU07UUFDTixXQUFXO0tBQ1o7SUFDRCxNQUFNLCtCQUErQixHQUFHLFlBQUssQ0FBQztJQUU5QyxPQUFPLElBQUEsYUFBTSxFQUNYLHFCQUFxQixFQUNyQiw0QkFBNEIsRUFDNUIsK0JBQStCLENBQ2hDLENBQUM7QUFDSixDQUFDO0FBbENELHNEQWtDQztBQUVEOztHQUVHO0FBQ0ksS0FBSyxVQUFVLGdCQUFnQixDQUNwQyxNQUFjLEVBQ2Qsa0JBQTBCLEVBQzFCLG1CQUEyQjtJQUUzQixNQUFNLGtCQUFrQixHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ3BDLE9BQU8sTUFBTSxJQUFJLDJCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRTtZQUMxRSxRQUFRLEVBQUUsT0FBUztTQUNwQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRixJQUFJLG1CQUFtQixFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztLQUN4QztJQUVELE9BQU8sSUFBQSxrQ0FBYyxFQUFDLGtCQUFrQixFQUFFLDBCQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQWhCRCw0Q0FnQkM7QUFFRCw0QkFBNEI7QUFDNUIsb0JBQW9CO0FBQ3BCLHlGQUF5RjtBQUN6RixNQUFNO0FBQ04sdUNBQXVDO0FBQ3ZDLGlDQUFpQztBQUNqQywyQ0FBMkM7QUFDM0MscURBQXFEO0FBQ3JELHFDQUFxQztBQUNyQyxRQUFRO0FBQ1IsMkJBQTJCO0FBQzNCLElBQUkifQ==