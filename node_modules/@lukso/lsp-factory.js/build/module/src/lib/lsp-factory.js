import { ethers, providers, Signer } from 'ethers';
import { DigitalAsset } from './classes/digital-asset';
import { LSP3UniversalProfile } from './classes/lsp3-universal-profile';
import { ProxyDeployer } from './classes/proxy-deployer';
/**
 * Factory for creating LSP3UniversalProfiles / LSP4DigitalCertificates
 */
export class LSPFactory {
    /**
     * TBD
     *
     * @param {string | providers.Web3Provider | providers.JsonRpcProvider} rpcUrlOrProvider
     * @param {string | Signer | SignerOptions} privateKeyOrSigner
     * @param {number} [chainId=22] Lukso Testnet - 22 (0x16)
     */
    constructor(rpcUrlOrProvider, privateKeyOrSigner) {
        let signer;
        let provider;
        let chainId = 22;
        if (rpcUrlOrProvider instanceof providers.Web3Provider ||
            rpcUrlOrProvider instanceof providers.JsonRpcProvider) {
            provider = rpcUrlOrProvider;
        }
        else {
            provider = new ethers.providers.JsonRpcProvider(rpcUrlOrProvider);
        }
        if (privateKeyOrSigner instanceof Signer) {
            signer = privateKeyOrSigner;
        }
        else if (typeof privateKeyOrSigner === 'string') {
            signer = new ethers.Wallet(privateKeyOrSigner, provider);
        }
        else {
            signer = new ethers.Wallet(privateKeyOrSigner.deployKey, provider);
            chainId = privateKeyOrSigner.chainId;
        }
        this.options = {
            signer,
            provider,
            chainId,
        };
        this.DigitalAsset = new DigitalAsset(this.options);
        this.LSP3UniversalProfile = new LSP3UniversalProfile(this.options);
        this.ProxyDeployer = new ProxyDeployer(this.options.signer);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHNwLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2xzcC1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBSXpEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFLckI7Ozs7OztPQU1HO0lBQ0gsWUFDRSxnQkFBNkUsRUFDN0Usa0JBQW1EO1FBRW5ELElBQUksTUFBYyxDQUFDO1FBQ25CLElBQUksUUFBNEQsQ0FBQztRQUNqRSxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFFakIsSUFDRSxnQkFBZ0IsWUFBWSxTQUFTLENBQUMsWUFBWTtZQUNsRCxnQkFBZ0IsWUFBWSxTQUFTLENBQUMsZUFBZSxFQUNyRDtZQUNBLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztTQUM3QjthQUFNO1lBQ0wsUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNuRTtRQUVELElBQUksa0JBQWtCLFlBQVksTUFBTSxFQUFFO1lBQ3hDLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQztTQUM3QjthQUFNLElBQUksT0FBTyxrQkFBa0IsS0FBSyxRQUFRLEVBQUU7WUFDakQsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMxRDthQUFNO1lBQ0wsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbkUsT0FBTyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztTQUN0QztRQUVELElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixNQUFNO1lBQ04sUUFBUTtZQUNSLE9BQU87U0FDUixDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDO0NBQ0YifQ==