var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from 'axios';
import { ContractFactory } from 'ethers';
import { concat, defer, EMPTY, forkJoin, from, of } from 'rxjs';
import { shareReplay, switchMap } from 'rxjs/operators';
import { LSP3UniversalProfile, UniversalProfile__factory, UniversalProfileInit__factory, } from '../..';
import { ADDRESS_PERMISSIONS_ARRAY_KEY, ALL_PERMISSIONS, LSP3_UP_KEYS, PREFIX_PERMISSIONS, SET_DATA_PERMISSION, } from '../helpers/config.helper';
import { deployContract, getProxyByteCode, initialize, waitForReceipt, } from '../helpers/deployment.helper';
import { encodeLSP3Profile } from '../helpers/erc725.helper';
import { ContractNames, DeploymentStatus, DeploymentType, } from '../interfaces';
export function accountDeployment$(signer, controllerAddresses, baseContractAddresses$) {
    return baseContractAddresses$.pipe(switchMap((baseContractAddresses) => {
        return accountDeploymentWithBaseContractAddress$(signer, controllerAddresses, baseContractAddresses.ERC725Account);
    }), shareReplay());
}
export function accountDeploymentWithBaseContractAddress$(signer, controllerAddresses, baseContractAddress) {
    const accountDeployment$ = defer(() => deployLSP3Account(signer, controllerAddresses, baseContractAddress)).pipe(shareReplay());
    const accountDeploymentReceipt$ = waitForReceipt(accountDeployment$).pipe(shareReplay());
    const accountDeploymentInitialize$ = baseContractAddress
        ? initializeProxy(signer, accountDeploymentReceipt$)
        : EMPTY;
    const accountDeploymentInitializeReceipt$ = waitForReceipt(accountDeploymentInitialize$).pipe(shareReplay());
    return concat(accountDeployment$, accountDeploymentReceipt$, accountDeploymentInitialize$, accountDeploymentInitializeReceipt$);
}
function deployLSP3Account(signer, ownerAddresses, baseContractAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        const deploymentFunction = () => __awaiter(this, void 0, void 0, function* () {
            return baseContractAddress
                ? new UniversalProfileInit__factory(signer).attach(baseContractAddress)
                : yield new UniversalProfile__factory(signer).deploy(ownerAddresses[0]);
        });
        return baseContractAddress
            ? deployProxyContract(deploymentFunction, signer)
            : deployContract(deploymentFunction, ContractNames.ERC725_Account);
    });
}
export function deployProxyContract(deployContractFunction, signer) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const contract = yield deployContractFunction();
            const factory = new ContractFactory(UniversalProfile__factory.abi, getProxyByteCode(contract.address), signer);
            const deployedProxy = yield factory.deploy(signer.getAddress());
            const transaction = deployedProxy.deployTransaction;
            return {
                type: DeploymentType.PROXY,
                contractName: ContractNames.ERC725_Account,
                status: DeploymentStatus.PENDING,
                transaction,
            };
        }
        catch (error) {
            console.error(`Error when deploying ${ContractNames.ERC725_Account}`, error);
            throw error;
        }
    });
}
function initializeProxy(signer, accountDeploymentReceipt$) {
    return initialize(accountDeploymentReceipt$, new UniversalProfileInit__factory(signer), () => __awaiter(this, void 0, void 0, function* () {
        const signerAddress = yield signer.getAddress();
        return [signerAddress];
    })).pipe(shareReplay());
}
export function setDataTransaction$(signer, account$, universalReceiver$, controllerAddresses, lsp3ProfileData$) {
    const setDataTransaction$ = forkJoin([account$, universalReceiver$, lsp3ProfileData$]).pipe(switchMap(([{ receipt: lsp3AccountReceipt }, { receipt: universalReceiverDelegateReceipt }, lsp3ProfileData,]) => {
        return setData(signer, lsp3AccountReceipt.contractAddress || lsp3AccountReceipt.to, universalReceiverDelegateReceipt.contractAddress || universalReceiverDelegateReceipt.to, controllerAddresses, lsp3ProfileData);
    }), shareReplay());
    const setDataReceipt$ = waitForReceipt(setDataTransaction$);
    return concat(setDataTransaction$, setDataReceipt$);
}
export function getLsp3ProfileDataUrl(lsp3Profile) {
    return __awaiter(this, void 0, void 0, function* () {
        let lsp3ProfileData;
        if (typeof lsp3Profile === 'string') {
            let lsp3JsonUrl = lsp3Profile;
            const isIPFSUrl = lsp3Profile.startsWith('ipfs://');
            if (isIPFSUrl) {
                lsp3JsonUrl = 'https://ipfs.lukso.network/ipfs/' + lsp3Profile.split('/').at(-1); // TODO: Allow custom IPFS upload location
            }
            const ipfsResponse = yield axios.get(lsp3JsonUrl);
            const lsp3ProfileJson = ipfsResponse.data;
            lsp3ProfileData = {
                url: lsp3Profile,
                profile: lsp3ProfileJson,
            };
        }
        else {
            lsp3ProfileData = yield LSP3UniversalProfile.uploadProfileData(lsp3Profile);
        }
        return lsp3ProfileData;
    });
}
export function isLSP3ProfileDataEncoded(lsp3Profile) {
    if (!lsp3Profile.startsWith('ipfs://') && !lsp3Profile.startsWith('https://')) {
        return true;
    }
    return false;
}
export function lsp3ProfileUpload$(lsp3Profile) {
    let lsp3Profile$;
    if (typeof lsp3Profile !== 'string' || !isLSP3ProfileDataEncoded(lsp3Profile)) {
        lsp3Profile$ = lsp3Profile ? from(getLsp3ProfileDataUrl(lsp3Profile)) : of(null);
    }
    else {
        lsp3Profile$ = of(lsp3Profile);
    }
    return lsp3Profile$;
}
/**
 * TODO: docs
 */
export function setData(signer, erc725AccountAddress, universalReceiverDelegateAddress, controllerAddresses, lsp3Profile) {
    return __awaiter(this, void 0, void 0, function* () {
        let encodedLSP3Profile;
        if (lsp3Profile && typeof lsp3Profile !== 'string') {
            const encodedDataResult = lsp3Profile
                ? encodeLSP3Profile(lsp3Profile.profile, lsp3Profile.url)
                : null;
            encodedLSP3Profile = encodedDataResult.LSP3Profile.value;
        }
        else {
            encodedLSP3Profile = lsp3Profile;
        }
        const erc725Account = new UniversalProfile__factory(signer).attach(erc725AccountAddress);
        let controllerAddress;
        let signerPermissions;
        if (typeof controllerAddresses[0] === 'string') {
            controllerAddress = controllerAddresses[0];
        }
        else {
            controllerAddress = controllerAddresses[0].address;
            signerPermissions = controllerAddresses[0].permissions;
        }
        const keysToSet = [
            LSP3_UP_KEYS.UNIVERSAL_RECEIVER_DELEGATE_KEY,
            PREFIX_PERMISSIONS + controllerAddress.substr(2),
            PREFIX_PERMISSIONS + universalReceiverDelegateAddress.substr(2),
            ADDRESS_PERMISSIONS_ARRAY_KEY,
            ADDRESS_PERMISSIONS_ARRAY_KEY.slice(0, 34) + '00000000000000000000000000000000',
            ADDRESS_PERMISSIONS_ARRAY_KEY.slice(0, 34) + '00000000000000000000000000000001',
        ];
        const valuesToSet = [
            universalReceiverDelegateAddress,
            signerPermissions !== null && signerPermissions !== void 0 ? signerPermissions : ALL_PERMISSIONS,
            SET_DATA_PERMISSION,
            2,
            controllerAddress,
            universalReceiverDelegateAddress,
        ];
        if (encodedLSP3Profile) {
            keysToSet.push(LSP3_UP_KEYS.LSP3_PROFILE);
            valuesToSet.push(encodedLSP3Profile);
        }
        const transaction = yield erc725Account.setData(keysToSet, valuesToSet, {
            gasLimit: 1000000,
        });
        return {
            type: DeploymentType.TRANSACTION,
            contractName: ContractNames.ERC725_Account,
            functionName: 'setData',
            status: DeploymentStatus.PENDING,
            transaction,
        };
    });
}
export function getTransferOwnershipTransaction$(signer, accountDeployment$, keyManagerDeployment$) {
    const transferOwnershipTransaction$ = forkJoin([accountDeployment$, keyManagerDeployment$]).pipe(switchMap(([{ receipt: lsp3AccountReceipt }, { receipt: keyManagerContract }]) => {
        return transferOwnership(signer, lsp3AccountReceipt, keyManagerContract);
    }), shareReplay());
    const transferOwnershipReceipt$ = waitForReceipt(transferOwnershipTransaction$);
    return concat(transferOwnershipTransaction$, transferOwnershipReceipt$);
}
/**
 * TODO: docs
 */
export function transferOwnership(signer, lsp3AccountReceipt, keyManagerReceipt) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const signerAddress = yield signer.getAddress();
            const contract = new UniversalProfile__factory(signer).attach(lsp3AccountReceipt.contractAddress || lsp3AccountReceipt.to);
            const transaction = yield contract.transferOwnership(keyManagerReceipt.contractAddress || keyManagerReceipt.to, {
                from: signerAddress,
                gasLimit: 500000,
            });
            return {
                type: DeploymentType.TRANSACTION,
                status: DeploymentStatus.PENDING,
                contractName: ContractNames.ERC725_Account,
                functionName: 'transferOwnership',
                transaction,
            };
        }
        catch (error) {
            console.error('Error when transferring Ownership', error);
            throw error;
        }
    });
}
//# sourceMappingURL=data:application/json;base64,