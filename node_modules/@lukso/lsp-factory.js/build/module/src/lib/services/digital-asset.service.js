var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { concat, EMPTY, from, shareReplay, switchMap, takeLast } from 'rxjs';
import { LSP7DigitalAsset__factory, LSP7DigitalAssetInit__factory, LSP8IdentifiableDigitalAsset__factory, LSP8IdentifiableDigitalAssetInit__factory, } from '../../';
import { deployContract, deployProxyContract, waitForReceipt } from '../helpers/deployment.helper';
import { ContractNames, } from '../interfaces/digital-asset-deployment';
// LSP7
export function lsp7DigitalAssetDeployment$(signer, digitalAssetDeploymentOptions, baseContractAddress) {
    const lsp7Deployment$ = from(deployLSP7DigitalAsset(signer, digitalAssetDeploymentOptions, baseContractAddress)).pipe(shareReplay());
    const lsp7DeploymentReceipt$ = waitForReceipt(lsp7Deployment$).pipe(shareReplay());
    const lsp7Initialize$ = baseContractAddress
        ? initializeLSP7Proxy(signer, lsp7DeploymentReceipt$, digitalAssetDeploymentOptions)
        : EMPTY;
    const lsp7InitializeReceipt$ = waitForReceipt(lsp7Initialize$).pipe(shareReplay());
    return concat(lsp7Deployment$, lsp7DeploymentReceipt$, lsp7Initialize$, lsp7InitializeReceipt$);
}
function deployLSP7DigitalAsset(signer, digitalAssetDeploymentOptions, baseContractAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        const deploymentFunction = () => __awaiter(this, void 0, void 0, function* () {
            return baseContractAddress
                ? new LSP7DigitalAssetInit__factory(signer).attach(baseContractAddress)
                : yield new LSP7DigitalAsset__factory(signer).deploy(digitalAssetDeploymentOptions.name, digitalAssetDeploymentOptions.symbol, digitalAssetDeploymentOptions.ownerAddress, digitalAssetDeploymentOptions.isNFT);
        });
        return baseContractAddress
            ? deployProxyContract(LSP7DigitalAssetInit__factory.abi, deploymentFunction, ContractNames.LSP7_DIGITAL_ASSET, signer)
            : deployContract(deploymentFunction, ContractNames.LSP7_DIGITAL_ASSET);
    });
}
function initializeLSP7Proxy(signer, digitalAssetDeploymentReceipt$, digitalAssetDeploymentOptions) {
    const { name, symbol, ownerAddress, isNFT } = digitalAssetDeploymentOptions;
    const initialize$ = digitalAssetDeploymentReceipt$.pipe(takeLast(1), switchMap((result) => __awaiter(this, void 0, void 0, function* () {
        const contract = yield new LSP7DigitalAssetInit__factory(signer).attach(result.receipt.contractAddress);
        const transaction = yield contract[`initialize(string,string,address,bool)`](name, symbol, ownerAddress, isNFT, {
            gasLimit: 3000000,
        });
        return {
            type: result.type,
            contractName: result.contractName,
            functionName: 'initialize',
            status: result.status,
            transaction,
        };
    })), shareReplay());
    return initialize$;
}
// LSP8
export function lsp8IdentifiableDigitalAssetDeployment$(signer, digitalAssetDeploymentOptions, baseContractAddress) {
    const lsp8Deployment$ = from(deployLSP8IdentifiableDigitalAsset(signer, digitalAssetDeploymentOptions, baseContractAddress)).pipe(shareReplay());
    const lsp8DeploymentReceipt$ = waitForReceipt(lsp8Deployment$);
    const lsp8Initialize$ = baseContractAddress
        ? initializeLSP8Proxy(signer, lsp8DeploymentReceipt$, digitalAssetDeploymentOptions)
        : EMPTY;
    const lsp8InitializeReceipt$ = waitForReceipt(lsp8Initialize$).pipe(shareReplay());
    return concat(lsp8Deployment$, lsp8DeploymentReceipt$, lsp8Initialize$, lsp8InitializeReceipt$);
}
function deployLSP8IdentifiableDigitalAsset(signer, digitalAssetDeploymentOptions, baseContractAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        const deploymentFunction = () => __awaiter(this, void 0, void 0, function* () {
            return baseContractAddress
                ? new LSP8IdentifiableDigitalAssetInit__factory(signer).attach(baseContractAddress)
                : yield new LSP8IdentifiableDigitalAsset__factory(signer).deploy(digitalAssetDeploymentOptions.name, digitalAssetDeploymentOptions.symbol, digitalAssetDeploymentOptions.ownerAddress);
        });
        return baseContractAddress
            ? deployProxyContract(LSP8IdentifiableDigitalAssetInit__factory.abi, deploymentFunction, ContractNames.LSP8_DIGITAL_ASSET, signer)
            : deployContract(deploymentFunction, ContractNames.LSP8_DIGITAL_ASSET);
    });
}
function initializeLSP8Proxy(signer, digitalAssetDeploymentReceipt$, digitalAssetDeploymentOptions) {
    const { name, symbol, ownerAddress } = digitalAssetDeploymentOptions;
    const initialize$ = digitalAssetDeploymentReceipt$.pipe(takeLast(1), switchMap((result) => __awaiter(this, void 0, void 0, function* () {
        const contract = yield new LSP7DigitalAssetInit__factory(signer).attach(result.receipt.contractAddress);
        const transaction = yield contract[`initialize(string,string,address)`](name, symbol, ownerAddress, {
            gasLimit: 3000000,
        });
        return {
            type: result.type,
            contractName: result.contractName,
            functionName: 'initialize',
            status: result.status,
            transaction,
        };
    })), shareReplay());
    return initialize$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlnaXRhbC1hc3NldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9kaWdpdGFsLWFzc2V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFjLFdBQVcsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXpGLE9BQU8sRUFDTCx5QkFBeUIsRUFDekIsNkJBQTZCLEVBQzdCLHFDQUFxQyxFQUNyQyx5Q0FBeUMsR0FDMUMsTUFBTSxRQUFRLENBQUM7QUFDaEIsT0FBTyxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVuRyxPQUFPLEVBQ0wsYUFBYSxHQUdkLE1BQU0sd0NBQXdDLENBQUM7QUFJaEQsT0FBTztBQUVQLE1BQU0sVUFBVSwyQkFBMkIsQ0FDekMsTUFBYyxFQUNkLDZCQUFnRSxFQUNoRSxtQkFBNEI7SUFFNUIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUMxQixzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsNkJBQTZCLEVBQUUsbUJBQW1CLENBQUMsQ0FDbkYsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUV0QixNQUFNLHNCQUFzQixHQUFHLGNBQWMsQ0FBOEIsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUM5RixXQUFXLEVBQUUsQ0FDZCxDQUFDO0lBRUYsTUFBTSxlQUFlLEdBQUcsbUJBQW1CO1FBQ3pDLENBQUMsQ0FBQyxtQkFBbUIsQ0FDakIsTUFBTSxFQUNOLHNCQUFrRSxFQUNsRSw2QkFBNkIsQ0FDOUI7UUFDSCxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRVYsTUFBTSxzQkFBc0IsR0FBRyxjQUFjLENBQThCLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FDOUYsV0FBVyxFQUFF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