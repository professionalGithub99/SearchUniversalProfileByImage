var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { defer, EMPTY, merge, of } from 'rxjs';
import { defaultIfEmpty, shareReplay, switchMap, tap } from 'rxjs/operators';
import { LSP1UniversalReceiverDelegateInit__factory, LSP7DigitalAssetInit__factory, LSP8IdentifiableDigitalAssetInit__factory, ContractNames as UniversalProfileContractNames, UniversalProfileInit__factory, } from '../..';
import { GAS_PRICE, NULL_ADDRESS } from '../helpers/config.helper';
import { deployBaseContract, waitForReceipt } from '../helpers/deployment.helper';
import { ContractNames as DigitalAssetContractNames } from '../interfaces/digital-asset-deployment';
export function universalProfileBaseContractsDeployment$(signer, baseContractsToDeploy$) {
    const erc725AccountBaseContractDeploymentReceipt$ = deployBaseContract$(UniversalProfileContractNames.ERC725_Account, () => __awaiter(this, void 0, void 0, function* () {
        const universalProfileInit = yield new UniversalProfileInit__factory(signer).deploy({
            gasPrice: GAS_PRICE,
        });
        yield universalProfileInit.initialize(NULL_ADDRESS);
        return universalProfileInit;
    }));
    const universalReceiverBaseContractDeploymentReceipt$ = deployBaseContract$(UniversalProfileContractNames.UNIVERSAL_RECEIVER, () => {
        return new LSP1UniversalReceiverDelegateInit__factory(signer).deploy({ gasPrice: GAS_PRICE });
    });
    const baseContractDeployment$ = baseContractsToDeploy$.pipe(switchMap(([shouldDeployUPBaseContract, shouldDeployUniversalReceiverBaseContract]) => {
        return merge(shouldDeployUPBaseContract ? erc725AccountBaseContractDeploymentReceipt$ : EMPTY, shouldDeployUniversalReceiverBaseContract
            ? universalReceiverBaseContractDeploymentReceipt$
            : EMPTY);
    }), shareReplay());
    return baseContractDeployment$;
}
export function digitalAssetBaseContractsDeployment$(signer, baseContractsToDeploy$) {
    const lsp7DigitalAssetBaseContractReceipt$ = deployBaseContract$(DigitalAssetContractNames.LSP7_DIGITAL_ASSET, () => __awaiter(this, void 0, void 0, function* () {
        const lsp7Init = yield new LSP7DigitalAssetInit__factory(signer).deploy({
            gasPrice: GAS_PRICE,
        });
        yield lsp7Init['initialize(address)'](NULL_ADDRESS);
        return lsp7Init;
    }));
    const lsp8IdentifiableDigitalAssetReceipt$ = deployBaseContract$(DigitalAssetContractNames.LSP8_DIGITAL_ASSET, () => __awaiter(this, void 0, void 0, function* () {
        const lsp8Init = yield new LSP8IdentifiableDigitalAssetInit__factory(signer).deploy({
            gasPrice: GAS_PRICE,
        });
        yield lsp8Init['initialize(address)'](NULL_ADDRESS);
        return lsp8Init;
    }));
    const baseContractDeployment$ = baseContractsToDeploy$.pipe(switchMap(([shouldDeployLSP7, shouldDeployLSP8]) => {
        return merge(shouldDeployLSP7 ? lsp7DigitalAssetBaseContractReceipt$ : EMPTY, shouldDeployLSP8 ? lsp8IdentifiableDigitalAssetReceipt$ : EMPTY);
    }), shareReplay());
    return baseContractDeployment$;
}
function deployBaseContract$(contractName, deployContractFunction) {
    const deployContract = () => {
        return deployBaseContract(deployContractFunction, contractName);
    };
    const baseContractDeployment$ = defer(() => deployContract()).pipe(shareReplay());
    const baseContractDeploymentReceipt$ = waitForReceipt(baseContractDeployment$).pipe(shareReplay());
    return baseContractDeploymentReceipt$;
}
export function getUniversalProfileBaseContractAddresses$(defaultUPBaseContractAddress, defaultUniversalReceiverBaseContractAddress, defaultBaseContractByteCode$, signer, contractDeploymentOptions) {
    var _a, _b;
    const providedUPBaseContractAddress = (_a = contractDeploymentOptions === null || contractDeploymentOptions === void 0 ? void 0 : contractDeploymentOptions.libAddresses) === null || _a === void 0 ? void 0 : _a.erc725AccountInit;
    const providedUniversalReceiverContractAddress = (_b = contractDeploymentOptions === null || contractDeploymentOptions === void 0 ? void 0 : contractDeploymentOptions.libAddresses) === null || _b === void 0 ? void 0 : _b.universalReceiverDelegateInit;
    const baseContractsToDeploy$ = defaultBaseContractByteCode$.pipe(switchMap(([defaultUPBaseContractByteCode, defaultUniversalReceiverBaseContractByteCode]) => {
        const shouldDeployUPBaseContract = !providedUPBaseContractAddress && defaultUPBaseContractByteCode === '0x';
        const shouldDeployUniversalReceiverBaseContract = !providedUniversalReceiverContractAddress &&
            defaultUniversalReceiverBaseContractByteCode === '0x';
        return of([shouldDeployUPBaseContract, shouldDeployUniversalReceiverBaseContract]);
    }));
    const baseContracts$ = universalProfileBaseContractsDeployment$(signer, baseContractsToDeploy$);
    const baseContractAddresses = {
        [UniversalProfileContractNames.ERC725_Account]: providedUPBaseContractAddress !== null && providedUPBaseContractAddress !== void 0 ? providedUPBaseContractAddress : defaultUPBaseContractAddress,
        [UniversalProfileContractNames.UNIVERSAL_RECEIVER]: providedUniversalReceiverContractAddress !== null && providedUniversalReceiverContractAddress !== void 0 ? providedUniversalReceiverContractAddress : defaultUniversalReceiverBaseContractAddress,
    };
    const baseContractAddresses$ = baseContracts$.pipe(tap((deploymentEvent) => {
        baseContractAddresses[deploymentEvent.contractName] = deploymentEvent.receipt.contractAddress;
    }), defaultIfEmpty(of(baseContractAddresses)), switchMap(() => of(baseContractAddresses)), shareReplay());
    return baseContractAddresses$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb250cmFjdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9iYXNlLWNvbnRyYWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzRCxPQUFPLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0UsT0FBTyxFQUdMLDBDQUEwQyxFQUMxQyw2QkFBNkIsRUFDN0IseUNBQXlDLEVBQ3pDLGFBQWEsSUFBSSw2QkFBNkIsRUFDOUMsNkJBQTZCLEdBQzlCLE1BQU0sT0FBTyxDQUFDO0FBQ2YsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEYsT0FBTyxFQUFFLGFBQWEsSUFBSSx5QkFBeUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRXBHLE1BQU0sVUFBVSx3Q0FBd0MsQ0FDdEQsTUFBYyxFQUNkLHNCQUFzRDtJQUV0RCxNQUFNLDJDQUEyQyxHQUFHLG1CQUFtQixDQUNyRSw2QkFBNkIsQ0FBQyxjQUFjLEVBQzVDLEdBQVMsRUFBRTtRQUNULE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxJQUFJLDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNsRixRQUFRLEVBQUUsU0FBUztTQUNwQixDQUFDLENBQUM7UUFDSCxNQUFNLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRCxPQUFPLG9CQUFvQixDQUFDO0lBQzlCLENBQUMsQ0FBQSxDQUNGLENBQUM7SUFFRixNQUFNLCtDQUErQyxHQUFHLG1CQUFtQixDQUN6RSw2QkFBNkIsQ0FBQyxrQkFBa0IsRUFDaEQsR0FBRyxFQUFFO1FBQ0gsT0FBTyxJQUFJLDBDQUEwQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2hHLENBQUMsQ0FDRixDQUFDO0lBRUYsTUFBTSx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQyxJQUFJLENBQ3pELFNBQVMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCLEVBQUUseUNBQXlDLENBQUMsRUFBRSxFQUFFO1FBQ3BGLE9BQU8sS0FBSyxDQUNWLDBCQUEwQixDQUFDLENBQUMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUNoRix5Q0FBeUM7WUFDdkMsQ0FBQyxDQUFDLCtDQUErQztZQUNqRCxDQUFDLENBQUMsS0FBSyxDQUNWLENBQUM7SUFDSixDQUFDLENBQUMsRUFDRixXQUFXLEVBQUUsQ0FDZCxDQUFDO0lBRUYsT0FBTyx1QkFBdUIsQ0FBQztBQUNqQyxDQUFDO0FBRUQsTUFBTSxVQUFVLG9DQUFvQyxDQUNsRCxNQUFjLEVBQ2Qsc0JBQXNEO0lBRXRELE1BQU0sb0NBQW9DLEdBQUcsbUJBQW1CLENBQzlELHlCQUF5QixDQUFDLGtCQUFrQixFQUM1QyxHQUFTLEVBQUU7UUFDVCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksNkJBQTZCLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3RFLFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxDQUFBLENBQ0YsQ0FBQztJQUVGLE1BQU0sb0NBQW9DLEdBQUcsbUJBQW1CLENBQzlELHlCQUF5QixDQUFDLGtCQUFrQixFQUM1QyxHQUFTLEVBQUU7UUFDVCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUkseUNBQXlDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ2xGLFFBQVEsRUFBRSxTQUFTO1NBQ3BCLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxDQUFBLENBQ0YsQ0FBQztJQUVGLE1BQU0sdUJBQXVCLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxDQUN6RCxTQUFTLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtRQUNqRCxPQUFPLEtBQUssQ0FDVixnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFDL0QsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQ2hFLENBQUM7SUFDSixDQUFDLENBQUMsRUFDRixXQUFXLEVBQUUsQ0FDZCxDQUFDO0lBRUYsT0FBTyx1QkFBdUIsQ0FBQztBQUNqQyxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FDMUIsWUFBdUUsRUFDdkUsc0JBQXNCO0lBRXRCLE1BQU0sY0FBYyxHQUFHLEdBQUcsRUFBRTtRQUMxQixPQUFPLGtCQUFrQixDQUFDLHNCQUFzQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2xFLENBQUMsQ0FBQztJQUVGLE1BQU0sdUJBQXVCLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFFbEYsTUFBTSw4QkFBOEIsR0FBRyxjQUFjLENBQ25ELHVCQUF1QixDQUN4QixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBRXRCLE9BQU8sOEJBQThCLENBQUM7QUFDeEMsQ0FBQztBQUVELE1BQU0sVUFBVSx5Q0FBeUMsQ0FDdkQsNEJBQW9DLEVBQ3BDLDJDQUFtRCxFQUNuRCw0QkFBMEQsRUFDMUQsTUFBYyxFQUNkLHlCQUFxRDs7SUFFckQsTUFBTSw2QkFBNkIsR0FBRyxNQUFBLHlCQUF5QixhQUF6Qix5QkFBeUIsdUJBQXpCLHlCQUF5QixDQUFFLFlBQVksMENBQUUsaUJBQWlCLENBQUM7SUFDakcsTUFBTSx3Q0FBd0MsR0FDNUMsTUFBQSx5QkFBeUIsYUFBekIseUJBQXlCLHVCQUF6Qix5QkFBeUIsQ0FBRSxZQUFZLDBDQUFFLDZCQUE2QixDQUFDO0lBRXpFLE1BQU0sc0JBQXNCLEdBQUcsNEJBQTRCLENBQUMsSUFBSSxDQUM5RCxTQUFTLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixFQUFFLDRDQUE0QyxDQUFDLEVBQUUsRUFBRTtRQUMxRixNQUFNLDBCQUEwQixHQUM5QixDQUFDLDZCQUE2QixJQUFJLDZCQUE2QixLQUFLLElBQUksQ0FBQztRQUUzRSxNQUFNLHlDQUF5QyxHQUM3QyxDQUFDLHdDQUF3QztZQUN6Qyw0Q0FBNEMsS0FBSyxJQUFJLENBQUM7UUFFeEQsT0FBTyxFQUFFLENBQUMsQ0FBQywwQkFBMEIsRUFBRSx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7SUFDckYsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUVGLE1BQU0sY0FBYyxHQUFHLHdDQUF3QyxDQUM3RCxNQUFNLEVBQ04sc0JBQXdELENBQ3pELENBQUM7SUFFRixNQUFNLHFCQUFxQixHQUFHO1FBQzVCLENBQUMsNkJBQTZCLENBQUMsY0FBYyxDQUFDLEVBQzVDLDZCQUE2QixhQUE3Qiw2QkFBNkIsY0FBN0IsNkJBQTZCLEdBQUksNEJBQTRCO1FBQy9ELENBQUMsNkJBQTZCLENBQUMsa0JBQWtCLENBQUMsRUFDaEQsd0NBQXdDLGFBQXhDLHdDQUF3QyxjQUF4Qyx3Q0FBd0MsR0FBSSwyQ0FBMkM7S0FDMUYsQ0FBQztJQUVGLE1BQU0sc0JBQXNCLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FDaEQsR0FBRyxDQUFDLENBQUMsZUFBd0MsRUFBRSxFQUFFO1FBQy9DLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUNoRyxDQUFDLENBQUMsRUFDRixjQUFjLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLENBQUMsRUFDekMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQzFDLFdBQVcsRUFBRSxDQUNkLENBQUM7SUFFRixPQUFPLHNCQUFzQixDQUFDO0FBQ2hDLENBQUMifQ==