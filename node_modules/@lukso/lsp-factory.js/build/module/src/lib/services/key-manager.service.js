var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { concat, EMPTY } from 'rxjs';
import { shareReplay, switchMap, takeLast } from 'rxjs/operators';
import { LSP6KeyManager__factory } from '../..';
import { deployContract, waitForReceipt } from '../helpers/deployment.helper';
import { ContractNames } from '../interfaces';
export function keyManagerDeployment$(signer, accountDeployment$, baseContractAddress) {
    const keyManagerDeployment$ = accountDeployment$.pipe(takeLast(1), switchMap(({ receipt }) => {
        const erc725AccountAddress = receipt.contractAddress || receipt.to;
        return deployKeyManager(signer, erc725AccountAddress, baseContractAddress);
    }), shareReplay());
    const keyManagerDeploymentReceipt$ = waitForReceipt(keyManagerDeployment$).pipe(shareReplay());
    if (baseContractAddress) {
        throw new Error('Not yet implemented');
        // const keyManagerDeploymentInitialize$ = baseContractAddress
        // ? initializeProxy(
        //     signer,
        //     keyManagerDeploymentReceipt$ as Observable<DeploymentEventProxyContract<KeyManagerInit>>
        //   )
        // : EMPTY;
    }
    const keyManagerDeploymentInitialize$ = EMPTY;
    return concat(keyManagerDeployment$, keyManagerDeploymentReceipt$, keyManagerDeploymentInitialize$);
}
/**
 * TODO: docs
 */
export function deployKeyManager(signer, lsp3AccountAddress, baseContractAddress) {
    return __awaiter(this, void 0, void 0, function* () {
        const deploymentFunction = () => __awaiter(this, void 0, void 0, function* () {
            return yield new LSP6KeyManager__factory(signer).deploy(lsp3AccountAddress, {
                gasLimit: 3000000,
            });
        });
        if (baseContractAddress) {
            throw new Error('Not yet implemented');
        }
        return deployContract(deploymentFunction, ContractNames.KEY_MANAGER);
    });
}
// function initializeProxy(
//   signer: Signer,
//   accountDeploymentReceipt$: Observable<DeploymentEventProxyContract<LSP3AccountInit>>
// ) {
//   return initialize<KeyManagerInit>(
//     accountDeploymentReceipt$,
//     new KeyManagerInit__factory(signer),
//     (result: DeploymentEvent<KeyManagerInit>) => {
//       return result.initArguments;
//     }
//   ).pipe(shareReplay());
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LW1hbmFnZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc2VydmljZXMva2V5LW1hbmFnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsYUFBYSxFQUEyQixNQUFNLGVBQWUsQ0FBQztBQU12RSxNQUFNLFVBQVUscUJBQXFCLENBQ25DLE1BQWMsRUFDZCxrQkFBMEQsRUFDMUQsbUJBQTJCO0lBRTNCLE1BQU0scUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUNuRCxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQ1gsU0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1FBQ3hCLE1BQU0sb0JBQW9CLEdBQUcsT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ25FLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxFQUFFLG9CQUFvQixFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDLEVBQ0YsV0FBVyxFQUFFLENBQ2QsQ0FBQztJQUVGLE1BQU0sNEJBQTRCLEdBQUcsY0FBYyxDQUNqRCxxQkFBcUIsQ0FDdEIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUV0QixJQUFJLG1CQUFtQixFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN2Qyw4REFBOEQ7UUFDOUQscUJBQXFCO1FBQ3JCLGNBQWM7UUFDZCwrRkFBK0Y7UUFDL0YsTUFBTTtRQUNOLFdBQVc7S0FDWjtJQUNELE1BQU0sK0JBQStCLEdBQUcsS0FBSyxDQUFDO0lBRTlDLE9BQU8sTUFBTSxDQUNYLHFCQUFxQixFQUNyQiw0QkFBNEIsRUFDNUIsK0JBQStCLENBQ2hDLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQWdCLGdCQUFnQixDQUNwQyxNQUFjLEVBQ2Qsa0JBQTBCLEVBQzFCLG1CQUEyQjs7UUFFM0IsTUFBTSxrQkFBa0IsR0FBRyxHQUFTLEVBQUU7WUFDcEMsT0FBTyxNQUFNLElBQUksdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFO2dCQUMxRSxRQUFRLEVBQUUsT0FBUzthQUNwQixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUEsQ0FBQztRQUVGLElBQUksbUJBQW1CLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsT0FBTyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7Q0FBQTtBQUVELDRCQUE0QjtBQUM1QixvQkFBb0I7QUFDcEIseUZBQXlGO0FBQ3pGLE1BQU07QUFDTix1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDLDJDQUEyQztBQUMzQyxxREFBcUQ7QUFDckQscUNBQXFDO0FBQ3JDLFFBQVE7QUFDUiwyQkFBMkI7QUFDM0IsSUFBSSJ9