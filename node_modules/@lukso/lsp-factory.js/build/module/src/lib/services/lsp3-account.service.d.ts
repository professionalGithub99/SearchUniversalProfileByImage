import { TransactionReceipt } from '@ethersproject/providers';
import { Signer } from 'ethers';
import { Observable } from 'rxjs';
import { ContractNames, ControllerOptions, DeploymentEvent$, DeploymentEventContract, DeploymentEventProxyContract, DeploymentEventTransaction, ProfileDataBeforeUpload } from '../interfaces';
import { LSP3ProfileDataForEncoding } from '../interfaces/lsp3-profile';
import { UniversalReveiverDeploymentEvent } from './universal-receiver.service';
export declare type LSP3AccountDeploymentEvent = DeploymentEventContract | DeploymentEventProxyContract;
export declare function accountDeployment$(signer: Signer, controllerAddresses: string[], baseContractAddresses$: Observable<{
    [ContractNames.ERC725_Account]: string;
    [ContractNames.UNIVERSAL_RECEIVER]: string;
}>): Observable<LSP3AccountDeploymentEvent>;
export declare function accountDeploymentWithBaseContractAddress$(signer: Signer, controllerAddresses: string[], baseContractAddress: string): Observable<LSP3AccountDeploymentEvent>;
export declare function deployProxyContract(deployContractFunction: any, signer: Signer): Promise<DeploymentEventProxyContract>;
export declare function setDataTransaction$(signer: Signer, account$: Observable<LSP3AccountDeploymentEvent>, universalReceiver$: Observable<UniversalReveiverDeploymentEvent>, controllerAddresses: (string | ControllerOptions)[], lsp3ProfileData$: Observable<LSP3ProfileDataForEncoding | string | null>): Observable<DeploymentEventTransaction>;
export declare function getLsp3ProfileDataUrl(lsp3Profile: ProfileDataBeforeUpload | string): Promise<LSP3ProfileDataForEncoding>;
export declare function isLSP3ProfileDataEncoded(lsp3Profile: string): boolean;
export declare function lsp3ProfileUpload$(lsp3Profile: ProfileDataBeforeUpload | string): Observable<string | LSP3ProfileDataForEncoding>;
/**
 * TODO: docs
 */
export declare function setData(signer: Signer, erc725AccountAddress: string, universalReceiverDelegateAddress: string, controllerAddresses: (string | ControllerOptions)[], lsp3Profile?: LSP3ProfileDataForEncoding | string): Promise<DeploymentEventTransaction>;
export declare function getTransferOwnershipTransaction$(signer: Signer, accountDeployment$: DeploymentEvent$, keyManagerDeployment$: DeploymentEvent$): Observable<DeploymentEventTransaction>;
/**
 * TODO: docs
 */
export declare function transferOwnership(signer: Signer, lsp3AccountReceipt: TransactionReceipt, keyManagerReceipt: TransactionReceipt): Promise<DeploymentEventTransaction>;
