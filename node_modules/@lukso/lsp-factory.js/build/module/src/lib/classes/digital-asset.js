import { NonceManager } from '@ethersproject/experimental';
import { lastValueFrom, of, scan } from 'rxjs';
import versions from '../../versions.json';
import { DEFAULT_CONTRACT_VERSION } from '../helpers/config.helper';
import { digitalAssetBaseContractsDeployment$ } from '../services/base-contract.service';
import { lsp7DigitalAssetDeployment$, lsp8IdentifiableDigitalAssetDeployment$, } from '../services/digital-asset.service';
export class DigitalAsset {
    constructor(options) {
        this.options = options;
        this.signer = new NonceManager(options.signer);
    }
    // LSP7
    deployLSP7DigitalAssetReactive(digitalAssetDeploymentOptions, contractDeploymentOptions) {
        var _a, _b, _c;
        const digitalAsset$ = lsp7DigitalAssetDeployment$(this.signer, digitalAssetDeploymentOptions, (_a = contractDeploymentOptions === null || contractDeploymentOptions === void 0 ? void 0 : contractDeploymentOptions.libAddress) !== null && _a !== void 0 ? _a : (_c = (_b = versions[this.options.chainId]) === null || _b === void 0 ? void 0 : _b.baseContracts) === null || _c === void 0 ? void 0 : _c.LSP7DigitalAsset[DEFAULT_CONTRACT_VERSION]);
        return digitalAsset$;
    }
    deployLSP7DigitalAsset(digitalAssetDeploymentOptions, contractDeploymentOptions) {
        const deployments$ = this.deployLSP7DigitalAssetReactive(digitalAssetDeploymentOptions, contractDeploymentOptions).pipe(scan((accumulator, deploymentEvent) => {
            if (deploymentEvent.receipt && deploymentEvent.receipt.contractAddress) {
                accumulator[deploymentEvent.contractName] = {
                    address: deploymentEvent.receipt.contractAddress,
                    receipt: deploymentEvent.receipt,
                };
            }
            return accumulator;
        }, {}));
        return lastValueFrom(deployments$);
    }
    // LSP8
    deployLSP8IdentifiableDigitalAssetReactive(digitalAssetDeploymentOptions, contractDeploymentOptions) {
        var _a, _b, _c;
        const digitalAsset$ = lsp8IdentifiableDigitalAssetDeployment$(this.signer, digitalAssetDeploymentOptions, (_a = contractDeploymentOptions === null || contractDeploymentOptions === void 0 ? void 0 : contractDeploymentOptions.libAddress) !== null && _a !== void 0 ? _a : (_c = (_b = versions[this.options.chainId]) === null || _b === void 0 ? void 0 : _b.baseContracts) === null || _c === void 0 ? void 0 : _c.LSP8IdentifiableDigitalAsset[DEFAULT_CONTRACT_VERSION]);
        return digitalAsset$;
    }
    deployLSP8IdentifiableDigitalAsset(digitalAssetDeploymentOptions, ContractDeploymentOptions) {
        const deployments$ = this.deployLSP8IdentifiableDigitalAssetReactive(digitalAssetDeploymentOptions, ContractDeploymentOptions).pipe(scan((accumulator, deploymentEvent) => {
            if (deploymentEvent.receipt && deploymentEvent.receipt.contractAddress) {
                accumulator[deploymentEvent.contractName] = {
                    address: deploymentEvent.receipt.contractAddress,
                    receipt: deploymentEvent.receipt,
                };
            }
            return accumulator;
        }, {}));
        return lastValueFrom(deployments$);
    }
    deployBaseContracts() {
        const baseContractsToDeploy$ = of([true, true]);
        const baseContracts$ = digitalAssetBaseContractsDeployment$(this.signer, baseContractsToDeploy$);
        const deployments$ = baseContracts$.pipe(scan((accumulator, deploymentEvent) => {
            if (deploymentEvent.receipt && deploymentEvent.receipt.contractAddress) {
                accumulator[deploymentEvent.contractName] = {
                    address: deploymentEvent.receipt.contractAddress,
                    receipt: deploymentEvent.receipt,
                };
            }
            return accumulator;
        }, {}));
        return lastValueFrom(deployments$);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlnaXRhbC1hc3NldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY2xhc3Nlcy9kaWdpdGFsLWFzc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0MsT0FBTyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFRcEUsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDekYsT0FBTyxFQUNMLDJCQUEyQixFQUMzQix1Q0FBdUMsR0FDeEMsTUFBTSxtQ0FBbUMsQ0FBQztBQUUzQyxNQUFNLE9BQU8sWUFBWTtJQUd2QixZQUFZLE9BQTBCO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxPQUFPO0lBRVAsOEJBQThCLENBQzVCLDZCQUFnRSxFQUNoRSx5QkFBcUQ7O1FBRXJELE1BQU0sYUFBYSxHQUFHLDJCQUEyQixDQUMvQyxJQUFJLENBQUMsTUFBTSxFQUNYLDZCQUE2QixFQUM3QixNQUFBLHlCQUF5QixhQUF6Qix5QkFBeUIsdUJBQXpCLHlCQUF5QixDQUFFLFVBQVUsbUNBQ25DLE1BQUEsTUFBQSxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsMENBQUUsYUFBYSwwQ0FBRSxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxDQUM1RixDQUFDO1FBQ0YsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVELHNCQUFzQixDQUNwQiw2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