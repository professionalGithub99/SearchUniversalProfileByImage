var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { NonceManager } from '@ethersproject/experimental';
import { LSP1UniversalReceiverDelegateInit__factory, UniversalProfileInit__factory, } from '../../';
import { getProxyByteCode } from '../helpers/deployment.helper';
export class ProxyDeployer {
    constructor(signer) {
        this.signer = new NonceManager(signer);
    }
    deployBaseContracts() {
        return __awaiter(this, void 0, void 0, function* () {
            const universalProfile = yield new UniversalProfileInit__factory(this.signer).deploy();
            const universalReceiverDelegate = yield new LSP1UniversalReceiverDelegateInit__factory(this.signer).deploy();
            this.baseContracts = {
                universalProfile,
                universalReceiverDelegate,
            };
            return this.baseContracts;
        });
    }
    deployProxyContract(contract) {
        return __awaiter(this, void 0, void 0, function* () {
            const proxyTx = yield this.signer.sendTransaction({
                data: getProxyByteCode(contract.address),
            });
            const proxyReceipt = yield proxyTx.wait();
            return contract.attach(proxyReceipt.contractAddress);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHktZGVwbG95ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NsYXNzZXMvcHJveHktZGVwbG95ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNELE9BQU8sRUFFTCwwQ0FBMEMsRUFFMUMsNkJBQTZCLEdBQzlCLE1BQU0sUUFBUSxDQUFDO0FBQ2hCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRWhFLE1BQU0sT0FBTyxhQUFhO0lBT3hCLFlBQVksTUFBYztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFSyxtQkFBbUI7O1lBQ3ZCLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLDZCQUE2QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN2RixNQUFNLHlCQUF5QixHQUFHLE1BQU0sSUFBSSwwQ0FBMEMsQ0FDcEYsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDLE1BQU0sRUFBRSxDQUFDO1lBRVgsSUFBSSxDQUFDLGFBQWEsR0FBRztnQkFDbkIsZ0JBQWdCO2dCQUNoQix5QkFBeUI7YUFDMUIsQ0FBQztZQUVGLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDO0tBQUE7SUFFSyxtQkFBbUIsQ0FBcUIsUUFBVzs7WUFDdkQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQztnQkFDaEQsSUFBSSxFQUFFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7YUFDekMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxZQUFZLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFMUMsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RCxDQUFDO0tBQUE7Q0FDRiJ9