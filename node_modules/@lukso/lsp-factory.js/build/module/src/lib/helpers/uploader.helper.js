var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import imageCompression from 'browser-image-compression';
import { keccak256 } from 'ethers/lib/utils';
import { create } from 'ipfs-http-client';
export const sizes = [1800, 1024, 640, 320, 180];
export function imageUpload(givenFile, uploadOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const isImage = ((_a = givenFile.type) === null || _a === void 0 ? void 0 : _a.substr(0, 6)) === 'image/';
        if (!isImage) {
            throw new Error(`File provided is of type "${givenFile.type}".`);
        }
        return Promise.all(sizes.map((size) => __awaiter(this, void 0, void 0, function* () {
            const img = yield imageCompression(givenFile, {
                maxWidthOrHeight: size,
                useWebWorker: true,
            });
            const imgBuffer = new Uint8Array(yield img.arrayBuffer());
            const loadedImg = yield imageCompression.drawFileInCanvas(img);
            const uploadResponse = yield ipfsUpload(img, uploadOptions.ipfsClientOptions);
            return {
                width: loadedImg[0].width,
                height: loadedImg[0].height,
                hashFunction: 'keccak256(bytes)',
                hash: keccak256(imgBuffer),
                url: 'ipfs://' + uploadResponse.cid.toString(),
            };
        })));
    });
}
export function ipfsUpload(file, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const ipfs = create(options);
        return yield ipfs.add(file, {
            pin: true,
        });
    });
}
export function prepareImageForLSP3(uploadOptions, image) {
    return __awaiter(this, void 0, void 0, function* () {
        let lsp3Image;
        if (Array.isArray(image)) {
            lsp3Image = image !== null && image !== void 0 ? image : null;
        }
        else if (image) {
            lsp3Image = yield imageUpload(image, uploadOptions);
        }
        return lsp3Image;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkZXIuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9oZWxwZXJzL3VwbG9hZGVyLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLGdCQUFnQixNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc3QyxPQUFPLEVBQUUsTUFBTSxFQUFXLE1BQU0sa0JBQWtCLENBQUM7QUFLbkQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2pELE1BQU0sVUFBZ0IsV0FBVyxDQUMvQixTQUFlLEVBQ2YsYUFBbUM7OztRQUVuQyxNQUFNLE9BQU8sR0FBRyxDQUFBLE1BQUEsU0FBUyxDQUFDLElBQUksMENBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBSyxRQUFRLENBQUM7UUFDMUQsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUNoQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQU8sSUFBSSxFQUFFLEVBQUU7WUFDdkIsTUFBTSxHQUFHLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUU7Z0JBQzVDLGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLFlBQVksRUFBRSxJQUFJO2FBQ25CLENBQUMsQ0FBQztZQUVILE1BQU0sU0FBUyxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDMUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvRCxNQUFNLGNBQWMsR0FBRyxNQUFNLFVBQVUsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFOUUsT0FBTztnQkFDTCxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7Z0JBQ3pCLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTTtnQkFDM0IsWUFBWSxFQUFFLGtCQUFrQjtnQkFDaEMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUM7Z0JBQzFCLEdBQUcsRUFBRSxTQUFTLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUU7YUFDL0MsQ0FBQztRQUNKLENBQUMsQ0FBQSxDQUFDLENBQ0gsQ0FBQzs7Q0FDSDtBQUVELE1BQU0sVUFBZ0IsVUFBVSxDQUFDLElBQXFCLEVBQUUsT0FBZ0I7O1FBQ3RFLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDMUIsR0FBRyxFQUFFLElBQUk7U0FDVixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQUE7QUFFRCxNQUFNLFVBQWdCLG1CQUFtQixDQUN2QyxhQUFvQyxFQUNwQyxLQUFpQzs7UUFFakMsSUFBSSxTQUFvQyxDQUFDO1FBRXpDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QixTQUFTLEdBQUcsS0FBSyxhQUFMLEtBQUssY0FBTCxLQUFLLEdBQUksSUFBSSxDQUFDO1NBQzNCO2FBQU0sSUFBSSxLQUFLLEVBQUU7WUFDaEIsU0FBUyxHQUFHLE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztTQUNyRDtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FBQSJ9