var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ContractFactory } from 'ethers';
import { catchError, shareReplay, switchMap, takeLast } from 'rxjs/operators';
import { DeploymentStatus, DeploymentType, } from '../interfaces/deployment-events';
import { GAS_PRICE } from './config.helper';
/**
 *
 *
 * @export
 * @template T
 * @param {*} deploymentEvent$
 * @return {*}  {Observable<T>}
 */
export function waitForReceipt(deploymentEvent$) {
    return deploymentEvent$.pipe(switchMap((deploymentEvent) => __awaiter(this, void 0, void 0, function* () {
        let status, functionName;
        status = DeploymentStatus.COMPLETE;
        switch (deploymentEvent.type) {
            case DeploymentType.PROXY:
                functionName = deploymentEvent.functionName;
                status = functionName ? DeploymentStatus.COMPLETE : DeploymentStatus.PENDING;
                break;
            case DeploymentType.TRANSACTION:
                functionName = deploymentEvent.functionName;
                break;
        }
        const receipt = yield deploymentEvent.transaction.wait();
        return Object.assign(Object.assign({ type: deploymentEvent.type, contractName: deploymentEvent.contractName }, (functionName && { functionName })), { status,
            receipt });
    })), catchError((error) => {
        const message = 'Error when waiting for the transaction receipt: ' + error.message;
        throw new Error(message);
    }));
}
export function initialize(deploymentEvent$, factory, initArguments) {
    const initialize$ = deploymentEvent$.pipe(takeLast(1), switchMap((result) => __awaiter(this, void 0, void 0, function* () {
        const contract = yield factory.attach(result.receipt.contractAddress);
        const initializeParams = yield initArguments(result);
        const transaction = yield contract.initialize(...initializeParams, {
            gasLimit: 3000000,
            gasPrice: GAS_PRICE,
        });
        return {
            type: result.type,
            contractName: result.contractName,
            functionName: 'initialize',
            status: result.status,
            transaction,
        };
    })), shareReplay());
    return initialize$;
}
/**
 * TODO: docs
 */
export function deployContract(deployContractFunction, name) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const contract = yield deployContractFunction();
            return {
                type: DeploymentType.CONTRACT,
                status: DeploymentStatus.PENDING,
                contractName: name,
                transaction: contract.deployTransaction,
            };
        }
        catch (error) {
            console.error(`Error when deploying ${name}`, error);
            throw error;
        }
    });
}
export function deployBaseContract(deployContractFunction, name) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const contract = yield deployContractFunction();
            return {
                type: DeploymentType.BASE_CONTRACT,
                status: DeploymentStatus.PENDING,
                contractName: name,
                transaction: contract.deployTransaction,
            };
        }
        catch (error) {
            console.error(`Error when deploying ${name}`, error);
            throw error;
        }
    });
}
export function deployProxyContract(abi, deployContractFunction, name, signer) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const contract = yield deployContractFunction();
            const factory = new ContractFactory(abi, getProxyByteCode(contract.address), signer);
            const deployedProxy = yield factory.deploy();
            const transaction = deployedProxy.deployTransaction;
            return {
                type: DeploymentType.PROXY,
                contractName: name,
                status: DeploymentStatus.PENDING,
                transaction,
            };
        }
        catch (error) {
            console.error(`Error when deploying ${name}`, error);
            throw error;
        }
    });
}
/**
 * Produces the bytecode needed to deploy a minimal proxy contract
 * https://eips.ethereum.org/EIPS/eip-1167
 *
 * @export
 * @param {string} address
 * @return {string}
 */
export function getProxyByteCode(address) {
    // prettier-ignore
    return `0x3d602d80600a3d3981f3363d3d373d3d3d363d73${address.substr(2)}5af43d82803e903d91602b57fd5bf3`;
}
export function getBaseContractAddresses(contractDeploymentOptions) {
    return contractDeploymentOptions.libAddresses;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudC5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL2hlbHBlcnMvZGVwbG95bWVudC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFZLGVBQWUsRUFBNkIsTUFBTSxRQUFRLENBQUM7QUFFOUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlFLE9BQU8sRUFLTCxnQkFBZ0IsRUFDaEIsY0FBYyxHQUNmLE1BQU0saUNBQWlDLENBQUM7QUFHekMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTVDOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFJLGdCQUFnQjtJQUNoRCxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FDMUIsU0FBUyxDQUFDLENBQU8sZUFBZ0MsRUFBRSxFQUFFO1FBQ25ELElBQUksTUFBTSxFQUFFLFlBQVksQ0FBQztRQUV6QixNQUFNLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1FBRW5DLFFBQVEsZUFBZSxDQUFDLElBQUksRUFBRTtZQUM1QixLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixZQUFZLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQztnQkFDNUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7Z0JBQzdFLE1BQU07WUFDUixLQUFLLGNBQWMsQ0FBQyxXQUFXO2dCQUM3QixZQUFZLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQztnQkFDNUMsTUFBTTtTQUNUO1FBQ0QsTUFBTSxPQUFPLEdBQUcsTUFBTSxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pELHFDQUNF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