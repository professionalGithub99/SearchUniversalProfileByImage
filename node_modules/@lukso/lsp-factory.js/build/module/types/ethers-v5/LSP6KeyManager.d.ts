import { ethers, Signer, BigNumber, BigNumberish, PopulatedTransaction, BaseContract, ContractTransaction, PayableOverrides, CallOverrides } from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export interface LSP6KeyManagerInterface extends ethers.utils.Interface {
    functions: {
        "account()": FunctionFragment;
        "execute(bytes)": FunctionFragment;
        "executeRelayCall(address,uint256,bytes,bytes)": FunctionFragment;
        "getNonce(address,uint256)": FunctionFragment;
        "isValidSignature(bytes32,bytes)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
    };
    encodeFunctionData(functionFragment: "account", values?: undefined): string;
    encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "executeRelayCall", values: [string, BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "getNonce", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isValidSignature", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "account", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeRelayCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    events: {
        "Executed(uint256,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
}
export declare type ExecutedEvent = TypedEvent<[
    BigNumber,
    string
], {
    _value: BigNumber;
    _data: string;
}>;
export declare type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;
export interface LSP6KeyManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: LSP6KeyManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        account(overrides?: CallOverrides): Promise<[string]>;
        execute(_data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        executeRelayCall(_signedFor: string, _nonce: BigNumberish, _data: BytesLike, _signature: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getNonce(_from: string, _channel: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<[string] & {
            magicValue: string;
        }>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
    };
    account(overrides?: CallOverrides): Promise<string>;
    execute(_data: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    executeRelayCall(_signedFor: string, _nonce: BigNumberish, _data: BytesLike, _signature: BytesLike, overrides?: PayableOverrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getNonce(_from: string, _channel: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<string>;
    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        account(overrides?: CallOverrides): Promise<string>;
        execute(_data: BytesLike, overrides?: CallOverrides): Promise<string>;
        executeRelayCall(_signedFor: string, _nonce: BigNumberish, _data: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<string>;
        getNonce(_from: string, _channel: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<string>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Executed(uint256,bytes)"(_value?: BigNumberish | null, _data?: null): ExecutedEventFilter;
        Executed(_value?: BigNumberish | null, _data?: null): ExecutedEventFilter;
    };
    estimateGas: {
        account(overrides?: CallOverrides): Promise<BigNumber>;
        execute(_data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        executeRelayCall(_signedFor: string, _nonce: BigNumberish, _data: BytesLike, _signature: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getNonce(_from: string, _channel: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        account(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute(_data: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        executeRelayCall(_signedFor: string, _nonce: BigNumberish, _data: BytesLike, _signature: BytesLike, overrides?: PayableOverrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getNonce(_from: string, _channel: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidSignature(_hash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
