"use strict";
/*
    This file is part of @erc725/erc725.js.
    @erc725/erc725.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    @erc725/erc725.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file providers/web3ProviderWrapper.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3ProviderWrapper = void 0;
const Method_1 = require("../types/Method");
const provider_wrapper_utils_1 = require("../lib/provider-wrapper-utils");
class Web3ProviderWrapper {
    constructor(provider) {
        this.type = "WEB3" /* WEB3 */;
        this.provider = provider;
    }
    async getOwner(address) {
        const result = await this.callContract(provider_wrapper_utils_1.constructJSONRPC(address, Method_1.Method.OWNER));
        if (result.error) {
            throw result.error;
        }
        return provider_wrapper_utils_1.decodeResult(Method_1.Method.OWNER, result);
    }
    async getData(address, keyHash) {
        return provider_wrapper_utils_1.decodeResult(Method_1.Method.GET_DATA, await this.callContract(provider_wrapper_utils_1.constructJSONRPC(address, Method_1.Method.GET_DATA, keyHash)));
    }
    async getAllData(address, keys) {
        const payload = [];
        for (let index = 0; index < keys.length; index++) {
            payload.push(provider_wrapper_utils_1.constructJSONRPC(address, Method_1.Method.GET_DATA, keys[index]));
        }
        const results = await this.callContract(payload);
        // map results to keys
        const returnValues = [];
        for (let index = 0; index < payload.length; index++) {
            returnValues.push({
                key: keys[index],
                value: provider_wrapper_utils_1.decodeResult(Method_1.Method.GET_DATA, results.find((element) => payload[index].id === element.id)),
            });
        }
        return returnValues;
    }
    async callContract(payload) {
        return new Promise((resolve, reject) => {
            // Send old web3 method with callback to resolve promise
            this.provider.send(payload, (e, r) => {
                if (e) {
                    reject(e);
                }
                else {
                    resolve(r);
                }
            });
        });
    }
}
exports.Web3ProviderWrapper = Web3ProviderWrapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViM1Byb3ZpZGVyV3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm92aWRlcnMvd2ViM1Byb3ZpZGVyV3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7OztFQVlFO0FBQ0Y7Ozs7R0FJRzs7O0FBUUgsNENBQXlDO0FBQ3pDLDBFQUErRTtBQUcvRSxNQUFhLG1CQUFtQjtJQUc5QixZQUFZLFFBQWE7UUFDdkIsSUFBSSxDQUFDLElBQUksb0JBQXFCLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBZTtRQUM1QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQ3BDLHlDQUFnQixDQUFDLE9BQU8sRUFBRSxlQUFNLENBQUMsS0FBSyxDQUFDLENBQ3hDLENBQUM7UUFDRixJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDaEIsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxxQ0FBWSxDQUFDLGVBQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZSxFQUFFLE9BQWU7UUFDNUMsT0FBTyxxQ0FBWSxDQUNqQixlQUFNLENBQUMsUUFBUSxFQUNmLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FDckIseUNBQWdCLENBQUMsT0FBTyxFQUFFLGVBQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQ3BELENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQWUsRUFBRSxJQUFjO1FBQzlDLE1BQU0sT0FBTyxHQUFjLEVBQUUsQ0FBQztRQUM5QixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNoRCxPQUFPLENBQUMsSUFBSSxDQUFDLHlDQUFnQixDQUFDLE9BQU8sRUFBRSxlQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkU7UUFFRCxNQUFNLE9BQU8sR0FBUSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdEQsc0JBQXNCO1FBQ3RCLE1BQU0sWUFBWSxHQUdaLEVBQUUsQ0FBQztRQUNULEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ25ELFlBQVksQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUNoQixLQUFLLEVBQUUscUNBQVksQ0FDakIsZUFBTSxDQUFDLFFBQVEsRUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FDNUQ7YUFDRixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFTyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU87UUFDaEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyx3REFBd0Q7WUFDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsRUFBRTtvQkFDTCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ1g7cUJBQU07b0JBQ0wsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNaO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQWxFRCxrREFrRUMifQ==