/**
 * @file lib/utils.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
import { KeyValuePair } from '../types';
import { ERC725JSONSchema, GenericSchema } from '../types/ERC725JSONSchema';
import { SUPPORTED_HASH_FUNCTIONS } from './constants';
declare type ERC725ObjectSchema = Pick<ERC725JSONSchema, 'key' | 'keyType' | 'valueContent' | 'valueType' | 'name'>;
/**
 *
 * @param schemaElementDefinition An object of the schema for this key
 * @param value can contain single value, or an object as required by schema (JSONURL, or ASSETURL)
 * @return the encoded value as per the schema
 */
export declare function encodeKeyValue(schemaElementDefinition: ERC725ObjectSchema, value: string): any;
/**
 *
 * @param key The schema key of a schema with keyType = 'Array'
 * @param index An integer representing the intended array index
 * @return The raw bytes key for the array element
 */
export declare function encodeArrayKey(key: string, index: number): string;
/**
 *
 * @param name the schema element name
 * @return the name of the key encoded as per specifications
 * @return a string of the encoded schema name
 */
export declare function encodeKeyName(name: string): string;
/**
 *
 * @param schemas An array of objects
 * @param {string} key A string of either the schema element name, or key
 * @return The requested schema element from the full array of schemas
 */
export declare function getSchemaElement(schemas: ERC725JSONSchema[], key: string): ERC725JSONSchema;
/**
 *
 * @param schema An object of a schema definition that must have a keyType of 'Array'
 * @param index The index of the array element to transpose the schema to
 * @return Modified schema element of keyType 'Singleton' for fetching or decoding/encoding the array element
 */
export declare function transposeArraySchema(schema: ERC725JSONSchema, index: number): ERC725ObjectSchema;
/**
 *
 * @param schema is an object of a schema definitions
 * @param value will be either key-value pairs for a key type of Array, or a single value for type Singleton
 * @return the encoded value for the key as per the supplied schema
 */
export declare function encodeKey(schema: ERC725JSONSchema, value: any): any;
/**
 *
 * @param schemaElementDefinition An object of the schema for this key
 * @param value the value to decode
 * @return the decoded value as per the schema
 */
export declare function decodeKeyValue(schemaElementDefinition: any, value: any): any;
/**
 *
 * @param schema is an object of a schema definitions
 * @param value will be either key-value pairs for a key type of Array, or a single value for type Singleton
 * @return the decoded value/values as per the schema definition
 */
export declare function decodeKey(schema: ERC725JSONSchema, value: any): any;
/**
 *
 * @param schema schema is an array of objects of schema definitions
 * @param data data is an array of objects of key-value pairs
 * @return: all decoded data as per required by the schema and provided data
 */
export declare function decodeData<Schema extends GenericSchema, T extends keyof Schema>(data: {
    [K in T]: Schema[T]['decodeData']['inputTypes'];
}, schema: ERC725JSONSchema[]): {
    [K in T]: Schema[T]['decodeData']['returnValues'];
};
/**
 * @param schema an array of schema definitions as per ${@link ERC725JSONSchema}
 * @param data an object of key-value pairs
 */
export declare function encodeData<Schema extends GenericSchema, T extends keyof Schema>(data: {
    [K in T]: Schema[T]['encodeData']['inputTypes'];
}, schema: ERC725JSONSchema[]): {
    [K in T]: Schema[T]['encodeData']['returnValues'];
};
export declare function getHashFunction(hashFunctionNameOrHash: any): {
    method: Function;
    name: string;
    sig: SUPPORTED_HASH_FUNCTIONS;
};
export declare function hashData(data: unknown, hashFunctionNameOrHash: SUPPORTED_HASH_FUNCTIONS): string;
/**
 * Hashes the data received with the specified hashing function,
 * and compares the result with the provided hash.
 *
 * @throws *Error* in case of a mismatch of the hashes.
 */
export declare function isDataAuthentic(data: any, expectedHash: string, lowerCaseHashFunction: SUPPORTED_HASH_FUNCTIONS): boolean;
/**
 * Transform the object containing the encoded data into an array ordered by keys,
 * for easier handling when writing the data to the blockchain.
 *
 * @param {{
 *   [key: string]: any;
 * }} encodedData This is essentially the object you receive when calling `encodeData(...)`
 * @return {*}  KeyValuePair[] An array of key-value objects
 */
export declare function flattenEncodedData(encodedData: {
    [key: string]: any;
}): KeyValuePair[];
export {};
