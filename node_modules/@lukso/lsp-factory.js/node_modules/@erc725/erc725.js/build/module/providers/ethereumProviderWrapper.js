/*
    This file is part of @erc725/erc725.js.
    @erc725/erc725.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    @erc725/erc725.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file providers/ethereumProviderWrapper.ts
 * @author Robert McLeod <@robertdavid010>, Fabian Vogelsteller <fabian@lukso.network>
 * @date 2020
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
  This file will handle querying the Ethereum provider api in accordance with
  implementation of smart contract interfaces of ERC725
*/
import * as abi from 'web3-eth-abi';
import { METHODS } from '../lib/constants';
import { Method } from '../types/Method';
// @ts-ignore
const web3Abi = abi.default;
export class EthereumProviderWrapper {
    constructor(provider) {
        this.type = "ETHEREUM" /* ETHEREUM */;
        this.provider = provider;
    }
    getOwner(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = this.constructJSONRPC(address, Method.OWNER);
            const result = yield this.callContract([params]);
            if (result.error) {
                throw result.error;
            }
            return this.decodeResult(Method.OWNER, result);
        });
    }
    getData(address, keyHash) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.callContract([
                this.constructJSONRPC(address, Method.GET_DATA, keyHash),
            ]);
            return this.decodeResult(Method.GET_DATA, result);
        });
    }
    getAllData(address, keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            for (let index = 0; index < keys.length; index++) {
                results.push({
                    key: keys[index],
                    value: yield this.getData(address, keys[index]),
                });
            }
            return results;
        });
    }
    // eslint-disable-next-line class-methods-use-this
    constructJSONRPC(address, method, methodParam) {
        const data = methodParam
            ? METHODS[method].sig + methodParam.replace('0x', '')
            : METHODS[method].sig;
        return {
            to: address,
            gas: METHODS[method].gas,
            gasPrice: METHODS[method].gasPrice,
            value: METHODS[method].value,
            data,
        };
    }
    callContract(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.provider.request({ method: 'eth_call', params });
        });
    }
    // eslint-disable-next-line class-methods-use-this
    decodeResult(method, result) {
        return result === '0x'
            ? null
            : web3Abi.decodeParameter(METHODS[method].returnEncoding, result);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoZXJldW1Qcm92aWRlcldyYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL2V0aGVyZXVtUHJvdmlkZXJXcmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7RUFZRTtBQUNGOzs7O0dBSUc7Ozs7Ozs7Ozs7QUFFSDs7O0VBR0U7QUFFRixPQUFPLEtBQUssR0FBRyxNQUFNLGNBQWMsQ0FBQztBQUVwQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3pDLGFBQWE7QUFDYixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO0FBRTVCLE1BQU0sT0FBTyx1QkFBdUI7SUFHbEMsWUFBWSxRQUFhO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLDRCQUF5QixDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFSyxRQUFRLENBQUMsT0FBZTs7WUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7Z0JBQ2hCLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNwQjtZQUVELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELENBQUM7S0FBQTtJQUVLLE9BQU8sQ0FBQyxPQUFlLEVBQUUsT0FBZTs7WUFDNUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUNyQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO2FBQ3pELENBQUMsQ0FBQztZQUNILE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BELENBQUM7S0FBQTtJQUVLLFVBQVUsQ0FBQyxPQUFlLEVBQUUsSUFBYzs7WUFDOUMsTUFBTSxPQUFPLEdBR1AsRUFBRSxDQUFDO1lBRVQsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQ2hELE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ1gsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQ2hCLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDaEQsQ0FBQyxDQUFDO2FBQ0o7WUFFRCxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDO0tBQUE7SUFFRCxrREFBa0Q7SUFDMUMsZ0JBQWdCLENBQ3RCLE9BQWUsRUFDZixNQUFjLEVBQ2QsV0FBb0I7UUFFcEIsTUFBTSxJQUFJLEdBQUcsV0FBVztZQUN0QixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7WUFDckQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFFeEIsT0FBTztZQUNMLEVBQUUsRUFBRSxPQUFPO1lBQ1gsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHO1lBQ3hCLFFBQVEsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUTtZQUNsQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUs7WUFDNUIsSUFBSTtTQUNMLENBQUM7SUFDSixDQUFDO0lBRWEsWUFBWSxDQUFDLE1BQVc7O1lBQ3BDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDL0QsQ0FBQztLQUFBO0lBRUQsa0RBQWtEO0lBQzFDLFlBQVksQ0FBQyxNQUFjLEVBQUUsTUFBYztRQUNqRCxPQUFPLE1BQU0sS0FBSyxJQUFJO1lBQ3BCLENBQUMsQ0FBQyxJQUFJO1lBQ04sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RSxDQUFDO0NBQ0YifQ==